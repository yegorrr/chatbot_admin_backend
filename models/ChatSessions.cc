/**
 *
 *  ChatSessions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ChatSessions.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::chatbot;

const std::string ChatSessions::Cols::_session_id = "\"session_id\"";
const std::string ChatSessions::Cols::_course_id = "\"course_id\"";
const std::string ChatSessions::Cols::_user_identifier = "\"user_identifier\"";
const std::string ChatSessions::Cols::_created_at = "\"created_at\"";
const std::string ChatSessions::Cols::_last_activity_at = "\"last_activity_at\"";
const std::string ChatSessions::Cols::_expires_at = "\"expires_at\"";
const std::string ChatSessions::Cols::_request_limit = "\"request_limit\"";
const std::string ChatSessions::Cols::_requests_used = "\"requests_used\"";
const std::string ChatSessions::primaryKeyName = "session_id";
const bool ChatSessions::hasPrimaryKey = true;
const std::string ChatSessions::tableName = "\"chat_sessions\"";

const std::vector<typename ChatSessions::MetaData> ChatSessions::metaData_={
{"session_id","std::string","uuid",0,0,1,1},
{"course_id","std::string","character varying",255,0,0,1},
{"user_identifier","std::string","text",0,0,0,0},
{"created_at","::trantor::Date","timestamp with time zone",0,0,0,0},
{"last_activity_at","::trantor::Date","timestamp with time zone",0,0,0,0},
{"expires_at","::trantor::Date","timestamp with time zone",0,0,0,0},
{"request_limit","int32_t","integer",4,0,0,0},
{"requests_used","int32_t","integer",4,0,0,1}
};
const std::string &ChatSessions::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ChatSessions::ChatSessions(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(r["session_id"].as<std::string>());
        }
        if(!r["course_id"].isNull())
        {
            courseId_=std::make_shared<std::string>(r["course_id"].as<std::string>());
        }
        if(!r["user_identifier"].isNull())
        {
            userIdentifier_=std::make_shared<std::string>(r["user_identifier"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["last_activity_at"].isNull())
        {
            auto timeStr = r["last_activity_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastActivityAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["expires_at"].isNull())
        {
            auto timeStr = r["expires_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiresAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["request_limit"].isNull())
        {
            requestLimit_=std::make_shared<int32_t>(r["request_limit"].as<int32_t>());
        }
        if(!r["requests_used"].isNull())
        {
            requestsUsed_=std::make_shared<int32_t>(r["requests_used"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            sessionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            courseId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            userIdentifier_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastActivityAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiresAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            requestLimit_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            requestsUsed_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

ChatSessions::ChatSessions(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            courseId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userIdentifier_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastActivityAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiresAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            requestLimit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            requestsUsed_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

ChatSessions::ChatSessions(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("course_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["course_id"].isNull())
        {
            courseId_=std::make_shared<std::string>(pJson["course_id"].asString());
        }
    }
    if(pJson.isMember("user_identifier"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["user_identifier"].isNull())
        {
            userIdentifier_=std::make_shared<std::string>(pJson["user_identifier"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("last_activity_at"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["last_activity_at"].isNull())
        {
            auto timeStr = pJson["last_activity_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastActivityAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("expires_at"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["expires_at"].isNull())
        {
            auto timeStr = pJson["expires_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiresAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("request_limit"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["request_limit"].isNull())
        {
            requestLimit_=std::make_shared<int32_t>((int32_t)pJson["request_limit"].asInt64());
        }
    }
    if(pJson.isMember("requests_used"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["requests_used"].isNull())
        {
            requestsUsed_=std::make_shared<int32_t>((int32_t)pJson["requests_used"].asInt64());
        }
    }
}

void ChatSessions::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            courseId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userIdentifier_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastActivityAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiresAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            requestLimit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            requestsUsed_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void ChatSessions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("session_id"))
    {
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("course_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["course_id"].isNull())
        {
            courseId_=std::make_shared<std::string>(pJson["course_id"].asString());
        }
    }
    if(pJson.isMember("user_identifier"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["user_identifier"].isNull())
        {
            userIdentifier_=std::make_shared<std::string>(pJson["user_identifier"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("last_activity_at"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["last_activity_at"].isNull())
        {
            auto timeStr = pJson["last_activity_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastActivityAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("expires_at"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["expires_at"].isNull())
        {
            auto timeStr = pJson["expires_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiresAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("request_limit"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["request_limit"].isNull())
        {
            requestLimit_=std::make_shared<int32_t>((int32_t)pJson["request_limit"].asInt64());
        }
    }
    if(pJson.isMember("requests_used"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["requests_used"].isNull())
        {
            requestsUsed_=std::make_shared<int32_t>((int32_t)pJson["requests_used"].asInt64());
        }
    }
}

const std::string &ChatSessions::getValueOfSessionId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(sessionId_)
        return *sessionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChatSessions::getSessionId() const noexcept
{
    return sessionId_;
}
void ChatSessions::setSessionId(const std::string &pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(pSessionId);
    dirtyFlag_[0] = true;
}
void ChatSessions::setSessionId(std::string &&pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(std::move(pSessionId));
    dirtyFlag_[0] = true;
}
const typename ChatSessions::PrimaryKeyType & ChatSessions::getPrimaryKey() const
{
    assert(sessionId_);
    return *sessionId_;
}

const std::string &ChatSessions::getValueOfCourseId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(courseId_)
        return *courseId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChatSessions::getCourseId() const noexcept
{
    return courseId_;
}
void ChatSessions::setCourseId(const std::string &pCourseId) noexcept
{
    courseId_ = std::make_shared<std::string>(pCourseId);
    dirtyFlag_[1] = true;
}
void ChatSessions::setCourseId(std::string &&pCourseId) noexcept
{
    courseId_ = std::make_shared<std::string>(std::move(pCourseId));
    dirtyFlag_[1] = true;
}

const std::string &ChatSessions::getValueOfUserIdentifier() const noexcept
{
    static const std::string defaultValue = std::string();
    if(userIdentifier_)
        return *userIdentifier_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChatSessions::getUserIdentifier() const noexcept
{
    return userIdentifier_;
}
void ChatSessions::setUserIdentifier(const std::string &pUserIdentifier) noexcept
{
    userIdentifier_ = std::make_shared<std::string>(pUserIdentifier);
    dirtyFlag_[2] = true;
}
void ChatSessions::setUserIdentifier(std::string &&pUserIdentifier) noexcept
{
    userIdentifier_ = std::make_shared<std::string>(std::move(pUserIdentifier));
    dirtyFlag_[2] = true;
}
void ChatSessions::setUserIdentifierToNull() noexcept
{
    userIdentifier_.reset();
    dirtyFlag_[2] = true;
}

const ::trantor::Date &ChatSessions::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ChatSessions::getCreatedAt() const noexcept
{
    return createdAt_;
}
void ChatSessions::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[3] = true;
}
void ChatSessions::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &ChatSessions::getValueOfLastActivityAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(lastActivityAt_)
        return *lastActivityAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ChatSessions::getLastActivityAt() const noexcept
{
    return lastActivityAt_;
}
void ChatSessions::setLastActivityAt(const ::trantor::Date &pLastActivityAt) noexcept
{
    lastActivityAt_ = std::make_shared<::trantor::Date>(pLastActivityAt);
    dirtyFlag_[4] = true;
}
void ChatSessions::setLastActivityAtToNull() noexcept
{
    lastActivityAt_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &ChatSessions::getValueOfExpiresAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(expiresAt_)
        return *expiresAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ChatSessions::getExpiresAt() const noexcept
{
    return expiresAt_;
}
void ChatSessions::setExpiresAt(const ::trantor::Date &pExpiresAt) noexcept
{
    expiresAt_ = std::make_shared<::trantor::Date>(pExpiresAt);
    dirtyFlag_[5] = true;
}
void ChatSessions::setExpiresAtToNull() noexcept
{
    expiresAt_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &ChatSessions::getValueOfRequestLimit() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(requestLimit_)
        return *requestLimit_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChatSessions::getRequestLimit() const noexcept
{
    return requestLimit_;
}
void ChatSessions::setRequestLimit(const int32_t &pRequestLimit) noexcept
{
    requestLimit_ = std::make_shared<int32_t>(pRequestLimit);
    dirtyFlag_[6] = true;
}
void ChatSessions::setRequestLimitToNull() noexcept
{
    requestLimit_.reset();
    dirtyFlag_[6] = true;
}

const int32_t &ChatSessions::getValueOfRequestsUsed() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(requestsUsed_)
        return *requestsUsed_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChatSessions::getRequestsUsed() const noexcept
{
    return requestsUsed_;
}
void ChatSessions::setRequestsUsed(const int32_t &pRequestsUsed) noexcept
{
    requestsUsed_ = std::make_shared<int32_t>(pRequestsUsed);
    dirtyFlag_[7] = true;
}

void ChatSessions::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ChatSessions::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "session_id",
        "course_id",
        "user_identifier",
        "created_at",
        "last_activity_at",
        "expires_at",
        "request_limit",
        "requests_used"
    };
    return inCols;
}

void ChatSessions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCourseId())
        {
            binder << getValueOfCourseId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserIdentifier())
        {
            binder << getValueOfUserIdentifier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastActivityAt())
        {
            binder << getValueOfLastActivityAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getExpiresAt())
        {
            binder << getValueOfExpiresAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRequestLimit())
        {
            binder << getValueOfRequestLimit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRequestsUsed())
        {
            binder << getValueOfRequestsUsed();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ChatSessions::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void ChatSessions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCourseId())
        {
            binder << getValueOfCourseId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserIdentifier())
        {
            binder << getValueOfUserIdentifier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastActivityAt())
        {
            binder << getValueOfLastActivityAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getExpiresAt())
        {
            binder << getValueOfExpiresAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRequestLimit())
        {
            binder << getValueOfRequestLimit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRequestsUsed())
        {
            binder << getValueOfRequestsUsed();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ChatSessions::toJson() const
{
    Json::Value ret;
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getCourseId())
    {
        ret["course_id"]=getValueOfCourseId();
    }
    else
    {
        ret["course_id"]=Json::Value();
    }
    if(getUserIdentifier())
    {
        ret["user_identifier"]=getValueOfUserIdentifier();
    }
    else
    {
        ret["user_identifier"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getLastActivityAt())
    {
        ret["last_activity_at"]=getLastActivityAt()->toDbStringLocal();
    }
    else
    {
        ret["last_activity_at"]=Json::Value();
    }
    if(getExpiresAt())
    {
        ret["expires_at"]=getExpiresAt()->toDbStringLocal();
    }
    else
    {
        ret["expires_at"]=Json::Value();
    }
    if(getRequestLimit())
    {
        ret["request_limit"]=getValueOfRequestLimit();
    }
    else
    {
        ret["request_limit"]=Json::Value();
    }
    if(getRequestsUsed())
    {
        ret["requests_used"]=getValueOfRequestsUsed();
    }
    else
    {
        ret["requests_used"]=Json::Value();
    }
    return ret;
}

Json::Value ChatSessions::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getSessionId())
            {
                ret[pMasqueradingVector[0]]=getValueOfSessionId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCourseId())
            {
                ret[pMasqueradingVector[1]]=getValueOfCourseId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUserIdentifier())
            {
                ret[pMasqueradingVector[2]]=getValueOfUserIdentifier();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[3]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLastActivityAt())
            {
                ret[pMasqueradingVector[4]]=getLastActivityAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getExpiresAt())
            {
                ret[pMasqueradingVector[5]]=getExpiresAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRequestLimit())
            {
                ret[pMasqueradingVector[6]]=getValueOfRequestLimit();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRequestsUsed())
            {
                ret[pMasqueradingVector[7]]=getValueOfRequestsUsed();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getCourseId())
    {
        ret["course_id"]=getValueOfCourseId();
    }
    else
    {
        ret["course_id"]=Json::Value();
    }
    if(getUserIdentifier())
    {
        ret["user_identifier"]=getValueOfUserIdentifier();
    }
    else
    {
        ret["user_identifier"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getLastActivityAt())
    {
        ret["last_activity_at"]=getLastActivityAt()->toDbStringLocal();
    }
    else
    {
        ret["last_activity_at"]=Json::Value();
    }
    if(getExpiresAt())
    {
        ret["expires_at"]=getExpiresAt()->toDbStringLocal();
    }
    else
    {
        ret["expires_at"]=Json::Value();
    }
    if(getRequestLimit())
    {
        ret["request_limit"]=getValueOfRequestLimit();
    }
    else
    {
        ret["request_limit"]=Json::Value();
    }
    if(getRequestsUsed())
    {
        ret["requests_used"]=getValueOfRequestsUsed();
    }
    else
    {
        ret["requests_used"]=Json::Value();
    }
    return ret;
}

bool ChatSessions::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(0, "session_id", pJson["session_id"], err, true))
            return false;
    }
    else
    {
        err="The session_id column cannot be null";
        return false;
    }
    if(pJson.isMember("course_id"))
    {
        if(!validJsonOfField(1, "course_id", pJson["course_id"], err, true))
            return false;
    }
    else
    {
        err="The course_id column cannot be null";
        return false;
    }
    if(pJson.isMember("user_identifier"))
    {
        if(!validJsonOfField(2, "user_identifier", pJson["user_identifier"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(3, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("last_activity_at"))
    {
        if(!validJsonOfField(4, "last_activity_at", pJson["last_activity_at"], err, true))
            return false;
    }
    if(pJson.isMember("expires_at"))
    {
        if(!validJsonOfField(5, "expires_at", pJson["expires_at"], err, true))
            return false;
    }
    if(pJson.isMember("request_limit"))
    {
        if(!validJsonOfField(6, "request_limit", pJson["request_limit"], err, true))
            return false;
    }
    if(pJson.isMember("requests_used"))
    {
        if(!validJsonOfField(7, "requests_used", pJson["requests_used"], err, true))
            return false;
    }
    return true;
}
bool ChatSessions::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ChatSessions::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(0, "session_id", pJson["session_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("course_id"))
    {
        if(!validJsonOfField(1, "course_id", pJson["course_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_identifier"))
    {
        if(!validJsonOfField(2, "user_identifier", pJson["user_identifier"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(3, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("last_activity_at"))
    {
        if(!validJsonOfField(4, "last_activity_at", pJson["last_activity_at"], err, false))
            return false;
    }
    if(pJson.isMember("expires_at"))
    {
        if(!validJsonOfField(5, "expires_at", pJson["expires_at"], err, false))
            return false;
    }
    if(pJson.isMember("request_limit"))
    {
        if(!validJsonOfField(6, "request_limit", pJson["request_limit"], err, false))
            return false;
    }
    if(pJson.isMember("requests_used"))
    {
        if(!validJsonOfField(7, "requests_used", pJson["requests_used"], err, false))
            return false;
    }
    return true;
}
bool ChatSessions::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ChatSessions::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

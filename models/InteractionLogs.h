/**
 *
 *  InteractionLogs.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace chatbot
{

class InteractionLogs
{
  public:
    struct Cols
    {
        static const std::string _interaction_id;
        static const std::string _session_id;
        static const std::string _timestamp_user_request;
        static const std::string _timestamp_llm1_start;
        static const std::string _timestamp_llm1_end;
        static const std::string _timestamp_internal_search_start;
        static const std::string _timestamp_internal_search_end;
        static const std::string _timestamp_llm2_start;
        static const std::string _timestamp_llm2_end;
        static const std::string _timestamp_final_response;
        static const std::string _user_original_prompt;
        static const std::string _llm1_model_name;
        static const std::string _llm1_input_prompt;
        static const std::string _llm1_rephrased_question;
        static const std::string _llm1_keywords_extracted;
        static const std::string _llm1_semantic_search_string;
        static const std::string _llm1_input_tokens;
        static const std::string _llm1_output_tokens;
        static const std::string _llm1_processing_time_ms;
        static const std::string _internal_search_query_keywords;
        static const std::string _internal_search_query_semantic;
        static const std::string _internal_search_retrieved_docs;
        static const std::string _internal_search_processing_time_ms;
        static const std::string _llm2_model_name;
        static const std::string _llm2_constructed_prompt;
        static const std::string _llm2_final_response;
        static const std::string _llm2_input_tokens;
        static const std::string _llm2_output_tokens;
        static const std::string _llm2_processing_time_ms;
        static const std::string _final_response_to_user;
        static const std::string _overall_status;
        static const std::string _error_message;
        static const std::string _error_step;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = std::string;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit InteractionLogs(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit InteractionLogs(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    InteractionLogs(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    InteractionLogs() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column interaction_id  */
    ///Get the value of the column interaction_id, returns the default value if the column is null
    const std::string &getValueOfInteractionId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInteractionId() const noexcept;
    ///Set the value of the column interaction_id
    void setInteractionId(const std::string &pInteractionId) noexcept;
    void setInteractionId(std::string &&pInteractionId) noexcept;

    /**  For column session_id  */
    ///Get the value of the column session_id, returns the default value if the column is null
    const std::string &getValueOfSessionId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSessionId() const noexcept;
    ///Set the value of the column session_id
    void setSessionId(const std::string &pSessionId) noexcept;
    void setSessionId(std::string &&pSessionId) noexcept;

    /**  For column timestamp_user_request  */
    ///Get the value of the column timestamp_user_request, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampUserRequest() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampUserRequest() const noexcept;
    ///Set the value of the column timestamp_user_request
    void setTimestampUserRequest(const ::trantor::Date &pTimestampUserRequest) noexcept;
    void setTimestampUserRequestToNull() noexcept;

    /**  For column timestamp_llm1_start  */
    ///Get the value of the column timestamp_llm1_start, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampLlm1Start() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampLlm1Start() const noexcept;
    ///Set the value of the column timestamp_llm1_start
    void setTimestampLlm1Start(const ::trantor::Date &pTimestampLlm1Start) noexcept;
    void setTimestampLlm1StartToNull() noexcept;

    /**  For column timestamp_llm1_end  */
    ///Get the value of the column timestamp_llm1_end, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampLlm1End() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampLlm1End() const noexcept;
    ///Set the value of the column timestamp_llm1_end
    void setTimestampLlm1End(const ::trantor::Date &pTimestampLlm1End) noexcept;
    void setTimestampLlm1EndToNull() noexcept;

    /**  For column timestamp_internal_search_start  */
    ///Get the value of the column timestamp_internal_search_start, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampInternalSearchStart() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampInternalSearchStart() const noexcept;
    ///Set the value of the column timestamp_internal_search_start
    void setTimestampInternalSearchStart(const ::trantor::Date &pTimestampInternalSearchStart) noexcept;
    void setTimestampInternalSearchStartToNull() noexcept;

    /**  For column timestamp_internal_search_end  */
    ///Get the value of the column timestamp_internal_search_end, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampInternalSearchEnd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampInternalSearchEnd() const noexcept;
    ///Set the value of the column timestamp_internal_search_end
    void setTimestampInternalSearchEnd(const ::trantor::Date &pTimestampInternalSearchEnd) noexcept;
    void setTimestampInternalSearchEndToNull() noexcept;

    /**  For column timestamp_llm2_start  */
    ///Get the value of the column timestamp_llm2_start, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampLlm2Start() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampLlm2Start() const noexcept;
    ///Set the value of the column timestamp_llm2_start
    void setTimestampLlm2Start(const ::trantor::Date &pTimestampLlm2Start) noexcept;
    void setTimestampLlm2StartToNull() noexcept;

    /**  For column timestamp_llm2_end  */
    ///Get the value of the column timestamp_llm2_end, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampLlm2End() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampLlm2End() const noexcept;
    ///Set the value of the column timestamp_llm2_end
    void setTimestampLlm2End(const ::trantor::Date &pTimestampLlm2End) noexcept;
    void setTimestampLlm2EndToNull() noexcept;

    /**  For column timestamp_final_response  */
    ///Get the value of the column timestamp_final_response, returns the default value if the column is null
    const ::trantor::Date &getValueOfTimestampFinalResponse() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTimestampFinalResponse() const noexcept;
    ///Set the value of the column timestamp_final_response
    void setTimestampFinalResponse(const ::trantor::Date &pTimestampFinalResponse) noexcept;
    void setTimestampFinalResponseToNull() noexcept;

    /**  For column user_original_prompt  */
    ///Get the value of the column user_original_prompt, returns the default value if the column is null
    const std::string &getValueOfUserOriginalPrompt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUserOriginalPrompt() const noexcept;
    ///Set the value of the column user_original_prompt
    void setUserOriginalPrompt(const std::string &pUserOriginalPrompt) noexcept;
    void setUserOriginalPrompt(std::string &&pUserOriginalPrompt) noexcept;

    /**  For column llm1_model_name  */
    ///Get the value of the column llm1_model_name, returns the default value if the column is null
    const std::string &getValueOfLlm1ModelName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm1ModelName() const noexcept;
    ///Set the value of the column llm1_model_name
    void setLlm1ModelName(const std::string &pLlm1ModelName) noexcept;
    void setLlm1ModelName(std::string &&pLlm1ModelName) noexcept;
    void setLlm1ModelNameToNull() noexcept;

    /**  For column llm1_input_prompt  */
    ///Get the value of the column llm1_input_prompt, returns the default value if the column is null
    const std::string &getValueOfLlm1InputPrompt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm1InputPrompt() const noexcept;
    ///Set the value of the column llm1_input_prompt
    void setLlm1InputPrompt(const std::string &pLlm1InputPrompt) noexcept;
    void setLlm1InputPrompt(std::string &&pLlm1InputPrompt) noexcept;
    void setLlm1InputPromptToNull() noexcept;

    /**  For column llm1_rephrased_question  */
    ///Get the value of the column llm1_rephrased_question, returns the default value if the column is null
    const std::string &getValueOfLlm1RephrasedQuestion() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm1RephrasedQuestion() const noexcept;
    ///Set the value of the column llm1_rephrased_question
    void setLlm1RephrasedQuestion(const std::string &pLlm1RephrasedQuestion) noexcept;
    void setLlm1RephrasedQuestion(std::string &&pLlm1RephrasedQuestion) noexcept;
    void setLlm1RephrasedQuestionToNull() noexcept;

    /**  For column llm1_keywords_extracted  */
    ///Get the value of the column llm1_keywords_extracted, returns the default value if the column is null
    const std::string &getValueOfLlm1KeywordsExtracted() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm1KeywordsExtracted() const noexcept;
    ///Set the value of the column llm1_keywords_extracted
    void setLlm1KeywordsExtracted(const std::string &pLlm1KeywordsExtracted) noexcept;
    void setLlm1KeywordsExtracted(std::string &&pLlm1KeywordsExtracted) noexcept;
    void setLlm1KeywordsExtractedToNull() noexcept;

    /**  For column llm1_semantic_search_string  */
    ///Get the value of the column llm1_semantic_search_string, returns the default value if the column is null
    const std::string &getValueOfLlm1SemanticSearchString() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm1SemanticSearchString() const noexcept;
    ///Set the value of the column llm1_semantic_search_string
    void setLlm1SemanticSearchString(const std::string &pLlm1SemanticSearchString) noexcept;
    void setLlm1SemanticSearchString(std::string &&pLlm1SemanticSearchString) noexcept;
    void setLlm1SemanticSearchStringToNull() noexcept;

    /**  For column llm1_input_tokens  */
    ///Get the value of the column llm1_input_tokens, returns the default value if the column is null
    const int32_t &getValueOfLlm1InputTokens() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLlm1InputTokens() const noexcept;
    ///Set the value of the column llm1_input_tokens
    void setLlm1InputTokens(const int32_t &pLlm1InputTokens) noexcept;
    void setLlm1InputTokensToNull() noexcept;

    /**  For column llm1_output_tokens  */
    ///Get the value of the column llm1_output_tokens, returns the default value if the column is null
    const int32_t &getValueOfLlm1OutputTokens() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLlm1OutputTokens() const noexcept;
    ///Set the value of the column llm1_output_tokens
    void setLlm1OutputTokens(const int32_t &pLlm1OutputTokens) noexcept;
    void setLlm1OutputTokensToNull() noexcept;

    /**  For column llm1_processing_time_ms  */
    ///Get the value of the column llm1_processing_time_ms, returns the default value if the column is null
    const int32_t &getValueOfLlm1ProcessingTimeMs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLlm1ProcessingTimeMs() const noexcept;
    ///Set the value of the column llm1_processing_time_ms
    void setLlm1ProcessingTimeMs(const int32_t &pLlm1ProcessingTimeMs) noexcept;
    void setLlm1ProcessingTimeMsToNull() noexcept;

    /**  For column internal_search_query_keywords  */
    ///Get the value of the column internal_search_query_keywords, returns the default value if the column is null
    const std::string &getValueOfInternalSearchQueryKeywords() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInternalSearchQueryKeywords() const noexcept;
    ///Set the value of the column internal_search_query_keywords
    void setInternalSearchQueryKeywords(const std::string &pInternalSearchQueryKeywords) noexcept;
    void setInternalSearchQueryKeywords(std::string &&pInternalSearchQueryKeywords) noexcept;
    void setInternalSearchQueryKeywordsToNull() noexcept;

    /**  For column internal_search_query_semantic  */
    ///Get the value of the column internal_search_query_semantic, returns the default value if the column is null
    const std::string &getValueOfInternalSearchQuerySemantic() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInternalSearchQuerySemantic() const noexcept;
    ///Set the value of the column internal_search_query_semantic
    void setInternalSearchQuerySemantic(const std::string &pInternalSearchQuerySemantic) noexcept;
    void setInternalSearchQuerySemantic(std::string &&pInternalSearchQuerySemantic) noexcept;
    void setInternalSearchQuerySemanticToNull() noexcept;

    /**  For column internal_search_retrieved_docs  */
    ///Get the value of the column internal_search_retrieved_docs, returns the default value if the column is null
    const std::string &getValueOfInternalSearchRetrievedDocs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInternalSearchRetrievedDocs() const noexcept;
    ///Set the value of the column internal_search_retrieved_docs
    void setInternalSearchRetrievedDocs(const std::string &pInternalSearchRetrievedDocs) noexcept;
    void setInternalSearchRetrievedDocs(std::string &&pInternalSearchRetrievedDocs) noexcept;
    void setInternalSearchRetrievedDocsToNull() noexcept;

    /**  For column internal_search_processing_time_ms  */
    ///Get the value of the column internal_search_processing_time_ms, returns the default value if the column is null
    const int32_t &getValueOfInternalSearchProcessingTimeMs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getInternalSearchProcessingTimeMs() const noexcept;
    ///Set the value of the column internal_search_processing_time_ms
    void setInternalSearchProcessingTimeMs(const int32_t &pInternalSearchProcessingTimeMs) noexcept;
    void setInternalSearchProcessingTimeMsToNull() noexcept;

    /**  For column llm2_model_name  */
    ///Get the value of the column llm2_model_name, returns the default value if the column is null
    const std::string &getValueOfLlm2ModelName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm2ModelName() const noexcept;
    ///Set the value of the column llm2_model_name
    void setLlm2ModelName(const std::string &pLlm2ModelName) noexcept;
    void setLlm2ModelName(std::string &&pLlm2ModelName) noexcept;
    void setLlm2ModelNameToNull() noexcept;

    /**  For column llm2_constructed_prompt  */
    ///Get the value of the column llm2_constructed_prompt, returns the default value if the column is null
    const std::string &getValueOfLlm2ConstructedPrompt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm2ConstructedPrompt() const noexcept;
    ///Set the value of the column llm2_constructed_prompt
    void setLlm2ConstructedPrompt(const std::string &pLlm2ConstructedPrompt) noexcept;
    void setLlm2ConstructedPrompt(std::string &&pLlm2ConstructedPrompt) noexcept;
    void setLlm2ConstructedPromptToNull() noexcept;

    /**  For column llm2_final_response  */
    ///Get the value of the column llm2_final_response, returns the default value if the column is null
    const std::string &getValueOfLlm2FinalResponse() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLlm2FinalResponse() const noexcept;
    ///Set the value of the column llm2_final_response
    void setLlm2FinalResponse(const std::string &pLlm2FinalResponse) noexcept;
    void setLlm2FinalResponse(std::string &&pLlm2FinalResponse) noexcept;
    void setLlm2FinalResponseToNull() noexcept;

    /**  For column llm2_input_tokens  */
    ///Get the value of the column llm2_input_tokens, returns the default value if the column is null
    const int32_t &getValueOfLlm2InputTokens() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLlm2InputTokens() const noexcept;
    ///Set the value of the column llm2_input_tokens
    void setLlm2InputTokens(const int32_t &pLlm2InputTokens) noexcept;
    void setLlm2InputTokensToNull() noexcept;

    /**  For column llm2_output_tokens  */
    ///Get the value of the column llm2_output_tokens, returns the default value if the column is null
    const int32_t &getValueOfLlm2OutputTokens() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLlm2OutputTokens() const noexcept;
    ///Set the value of the column llm2_output_tokens
    void setLlm2OutputTokens(const int32_t &pLlm2OutputTokens) noexcept;
    void setLlm2OutputTokensToNull() noexcept;

    /**  For column llm2_processing_time_ms  */
    ///Get the value of the column llm2_processing_time_ms, returns the default value if the column is null
    const int32_t &getValueOfLlm2ProcessingTimeMs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLlm2ProcessingTimeMs() const noexcept;
    ///Set the value of the column llm2_processing_time_ms
    void setLlm2ProcessingTimeMs(const int32_t &pLlm2ProcessingTimeMs) noexcept;
    void setLlm2ProcessingTimeMsToNull() noexcept;

    /**  For column final_response_to_user  */
    ///Get the value of the column final_response_to_user, returns the default value if the column is null
    const std::string &getValueOfFinalResponseToUser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFinalResponseToUser() const noexcept;
    ///Set the value of the column final_response_to_user
    void setFinalResponseToUser(const std::string &pFinalResponseToUser) noexcept;
    void setFinalResponseToUser(std::string &&pFinalResponseToUser) noexcept;
    void setFinalResponseToUserToNull() noexcept;

    /**  For column overall_status  */
    ///Get the value of the column overall_status, returns the default value if the column is null
    const std::string &getValueOfOverallStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOverallStatus() const noexcept;
    ///Set the value of the column overall_status
    void setOverallStatus(const std::string &pOverallStatus) noexcept;
    void setOverallStatus(std::string &&pOverallStatus) noexcept;
    void setOverallStatusToNull() noexcept;

    /**  For column error_message  */
    ///Get the value of the column error_message, returns the default value if the column is null
    const std::string &getValueOfErrorMessage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getErrorMessage() const noexcept;
    ///Set the value of the column error_message
    void setErrorMessage(const std::string &pErrorMessage) noexcept;
    void setErrorMessage(std::string &&pErrorMessage) noexcept;
    void setErrorMessageToNull() noexcept;

    /**  For column error_step  */
    ///Get the value of the column error_step, returns the default value if the column is null
    const std::string &getValueOfErrorStep() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getErrorStep() const noexcept;
    ///Set the value of the column error_step
    void setErrorStep(const std::string &pErrorStep) noexcept;
    void setErrorStep(std::string &&pErrorStep) noexcept;
    void setErrorStepToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 33;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<InteractionLogs>;
    friend drogon::orm::BaseBuilder<InteractionLogs, true, true>;
    friend drogon::orm::BaseBuilder<InteractionLogs, true, false>;
    friend drogon::orm::BaseBuilder<InteractionLogs, false, true>;
    friend drogon::orm::BaseBuilder<InteractionLogs, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<InteractionLogs>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<std::string> interactionId_;
    std::shared_ptr<std::string> sessionId_;
    std::shared_ptr<::trantor::Date> timestampUserRequest_;
    std::shared_ptr<::trantor::Date> timestampLlm1Start_;
    std::shared_ptr<::trantor::Date> timestampLlm1End_;
    std::shared_ptr<::trantor::Date> timestampInternalSearchStart_;
    std::shared_ptr<::trantor::Date> timestampInternalSearchEnd_;
    std::shared_ptr<::trantor::Date> timestampLlm2Start_;
    std::shared_ptr<::trantor::Date> timestampLlm2End_;
    std::shared_ptr<::trantor::Date> timestampFinalResponse_;
    std::shared_ptr<std::string> userOriginalPrompt_;
    std::shared_ptr<std::string> llm1ModelName_;
    std::shared_ptr<std::string> llm1InputPrompt_;
    std::shared_ptr<std::string> llm1RephrasedQuestion_;
    std::shared_ptr<std::string> llm1KeywordsExtracted_;
    std::shared_ptr<std::string> llm1SemanticSearchString_;
    std::shared_ptr<int32_t> llm1InputTokens_;
    std::shared_ptr<int32_t> llm1OutputTokens_;
    std::shared_ptr<int32_t> llm1ProcessingTimeMs_;
    std::shared_ptr<std::string> internalSearchQueryKeywords_;
    std::shared_ptr<std::string> internalSearchQuerySemantic_;
    std::shared_ptr<std::string> internalSearchRetrievedDocs_;
    std::shared_ptr<int32_t> internalSearchProcessingTimeMs_;
    std::shared_ptr<std::string> llm2ModelName_;
    std::shared_ptr<std::string> llm2ConstructedPrompt_;
    std::shared_ptr<std::string> llm2FinalResponse_;
    std::shared_ptr<int32_t> llm2InputTokens_;
    std::shared_ptr<int32_t> llm2OutputTokens_;
    std::shared_ptr<int32_t> llm2ProcessingTimeMs_;
    std::shared_ptr<std::string> finalResponseToUser_;
    std::shared_ptr<std::string> overallStatus_;
    std::shared_ptr<std::string> errorMessage_;
    std::shared_ptr<std::string> errorStep_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[33]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where interaction_id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where interaction_id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "interaction_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "session_id,";
            ++parametersCount;
        }
        sql += "timestamp_user_request,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "timestamp_llm1_start,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "timestamp_llm1_end,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "timestamp_internal_search_start,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "timestamp_internal_search_end,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "timestamp_llm2_start,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "timestamp_llm2_end,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "timestamp_final_response,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "user_original_prompt,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "llm1_model_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "llm1_input_prompt,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "llm1_rephrased_question,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "llm1_keywords_extracted,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "llm1_semantic_search_string,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "llm1_input_tokens,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "llm1_output_tokens,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "llm1_processing_time_ms,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "internal_search_query_keywords,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "internal_search_query_semantic,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "internal_search_retrieved_docs,";
            ++parametersCount;
        }
        if(dirtyFlag_[22])
        {
            sql += "internal_search_processing_time_ms,";
            ++parametersCount;
        }
        if(dirtyFlag_[23])
        {
            sql += "llm2_model_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[24])
        {
            sql += "llm2_constructed_prompt,";
            ++parametersCount;
        }
        if(dirtyFlag_[25])
        {
            sql += "llm2_final_response,";
            ++parametersCount;
        }
        if(dirtyFlag_[26])
        {
            sql += "llm2_input_tokens,";
            ++parametersCount;
        }
        if(dirtyFlag_[27])
        {
            sql += "llm2_output_tokens,";
            ++parametersCount;
        }
        if(dirtyFlag_[28])
        {
            sql += "llm2_processing_time_ms,";
            ++parametersCount;
        }
        if(dirtyFlag_[29])
        {
            sql += "final_response_to_user,";
            ++parametersCount;
        }
        sql += "overall_status,";
        ++parametersCount;
        if(!dirtyFlag_[30])
        {
            needSelection=true;
        }
        if(dirtyFlag_[31])
        {
            sql += "error_message,";
            ++parametersCount;
        }
        if(dirtyFlag_[32])
        {
            sql += "error_step,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        if(dirtyFlag_[0])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[11])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[12])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[13])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[14])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[15])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[16])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[17])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[18])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[19])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[20])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[21])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[22])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[23])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[24])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[25])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[26])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[27])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[28])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[29])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[30])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[31])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[32])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace chatbot
} // namespace drogon_model

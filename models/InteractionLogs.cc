/**
 *
 *  InteractionLogs.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "InteractionLogs.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::chatbot;

const std::string InteractionLogs::Cols::_interaction_id = "\"interaction_id\"";
const std::string InteractionLogs::Cols::_session_id = "\"session_id\"";
const std::string InteractionLogs::Cols::_timestamp_user_request = "\"timestamp_user_request\"";
const std::string InteractionLogs::Cols::_timestamp_llm1_start = "\"timestamp_llm1_start\"";
const std::string InteractionLogs::Cols::_timestamp_llm1_end = "\"timestamp_llm1_end\"";
const std::string InteractionLogs::Cols::_timestamp_internal_search_start = "\"timestamp_internal_search_start\"";
const std::string InteractionLogs::Cols::_timestamp_internal_search_end = "\"timestamp_internal_search_end\"";
const std::string InteractionLogs::Cols::_timestamp_llm2_start = "\"timestamp_llm2_start\"";
const std::string InteractionLogs::Cols::_timestamp_llm2_end = "\"timestamp_llm2_end\"";
const std::string InteractionLogs::Cols::_timestamp_final_response = "\"timestamp_final_response\"";
const std::string InteractionLogs::Cols::_user_original_prompt = "\"user_original_prompt\"";
const std::string InteractionLogs::Cols::_llm1_model_name = "\"llm1_model_name\"";
const std::string InteractionLogs::Cols::_llm1_input_prompt = "\"llm1_input_prompt\"";
const std::string InteractionLogs::Cols::_llm1_rephrased_question = "\"llm1_rephrased_question\"";
const std::string InteractionLogs::Cols::_llm1_keywords_extracted = "\"llm1_keywords_extracted\"";
const std::string InteractionLogs::Cols::_llm1_semantic_search_string = "\"llm1_semantic_search_string\"";
const std::string InteractionLogs::Cols::_llm1_input_tokens = "\"llm1_input_tokens\"";
const std::string InteractionLogs::Cols::_llm1_output_tokens = "\"llm1_output_tokens\"";
const std::string InteractionLogs::Cols::_llm1_processing_time_ms = "\"llm1_processing_time_ms\"";
const std::string InteractionLogs::Cols::_internal_search_query_keywords = "\"internal_search_query_keywords\"";
const std::string InteractionLogs::Cols::_internal_search_query_semantic = "\"internal_search_query_semantic\"";
const std::string InteractionLogs::Cols::_internal_search_retrieved_docs = "\"internal_search_retrieved_docs\"";
const std::string InteractionLogs::Cols::_internal_search_processing_time_ms = "\"internal_search_processing_time_ms\"";
const std::string InteractionLogs::Cols::_llm2_model_name = "\"llm2_model_name\"";
const std::string InteractionLogs::Cols::_llm2_constructed_prompt = "\"llm2_constructed_prompt\"";
const std::string InteractionLogs::Cols::_llm2_final_response = "\"llm2_final_response\"";
const std::string InteractionLogs::Cols::_llm2_input_tokens = "\"llm2_input_tokens\"";
const std::string InteractionLogs::Cols::_llm2_output_tokens = "\"llm2_output_tokens\"";
const std::string InteractionLogs::Cols::_llm2_processing_time_ms = "\"llm2_processing_time_ms\"";
const std::string InteractionLogs::Cols::_final_response_to_user = "\"final_response_to_user\"";
const std::string InteractionLogs::Cols::_overall_status = "\"overall_status\"";
const std::string InteractionLogs::Cols::_error_message = "\"error_message\"";
const std::string InteractionLogs::Cols::_error_step = "\"error_step\"";
const std::string InteractionLogs::primaryKeyName = "interaction_id";
const bool InteractionLogs::hasPrimaryKey = true;
const std::string InteractionLogs::tableName = "\"interaction_logs\"";

const std::vector<typename InteractionLogs::MetaData> InteractionLogs::metaData_={
{"interaction_id","std::string","uuid",0,0,1,1},
{"session_id","std::string","uuid",0,0,0,1},
{"timestamp_user_request","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_llm1_start","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_llm1_end","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_internal_search_start","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_internal_search_end","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_llm2_start","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_llm2_end","::trantor::Date","timestamp with time zone",0,0,0,0},
{"timestamp_final_response","::trantor::Date","timestamp with time zone",0,0,0,0},
{"user_original_prompt","std::string","text",0,0,0,1},
{"llm1_model_name","std::string","character varying",100,0,0,0},
{"llm1_input_prompt","std::string","text",0,0,0,0},
{"llm1_rephrased_question","std::string","text",0,0,0,0},
{"llm1_keywords_extracted","std::string","ARRAY",0,0,0,0},
{"llm1_semantic_search_string","std::string","text",0,0,0,0},
{"llm1_input_tokens","int32_t","integer",4,0,0,0},
{"llm1_output_tokens","int32_t","integer",4,0,0,0},
{"llm1_processing_time_ms","int32_t","integer",4,0,0,0},
{"internal_search_query_keywords","std::string","ARRAY",0,0,0,0},
{"internal_search_query_semantic","std::string","text",0,0,0,0},
{"internal_search_retrieved_docs","std::string","jsonb",0,0,0,0},
{"internal_search_processing_time_ms","int32_t","integer",4,0,0,0},
{"llm2_model_name","std::string","character varying",100,0,0,0},
{"llm2_constructed_prompt","std::string","text",0,0,0,0},
{"llm2_final_response","std::string","text",0,0,0,0},
{"llm2_input_tokens","int32_t","integer",4,0,0,0},
{"llm2_output_tokens","int32_t","integer",4,0,0,0},
{"llm2_processing_time_ms","int32_t","integer",4,0,0,0},
{"final_response_to_user","std::string","text",0,0,0,0},
{"overall_status","std::string","character varying",50,0,0,0},
{"error_message","std::string","text",0,0,0,0},
{"error_step","std::string","character varying",50,0,0,0}
};
const std::string &InteractionLogs::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
InteractionLogs::InteractionLogs(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["interaction_id"].isNull())
        {
            interactionId_=std::make_shared<std::string>(r["interaction_id"].as<std::string>());
        }
        if(!r["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(r["session_id"].as<std::string>());
        }
        if(!r["timestamp_user_request"].isNull())
        {
            auto timeStr = r["timestamp_user_request"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampUserRequest_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_llm1_start"].isNull())
        {
            auto timeStr = r["timestamp_llm1_start"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_llm1_end"].isNull())
        {
            auto timeStr = r["timestamp_llm1_end"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_internal_search_start"].isNull())
        {
            auto timeStr = r["timestamp_internal_search_start"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_internal_search_end"].isNull())
        {
            auto timeStr = r["timestamp_internal_search_end"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_llm2_start"].isNull())
        {
            auto timeStr = r["timestamp_llm2_start"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_llm2_end"].isNull())
        {
            auto timeStr = r["timestamp_llm2_end"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["timestamp_final_response"].isNull())
        {
            auto timeStr = r["timestamp_final_response"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampFinalResponse_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["user_original_prompt"].isNull())
        {
            userOriginalPrompt_=std::make_shared<std::string>(r["user_original_prompt"].as<std::string>());
        }
        if(!r["llm1_model_name"].isNull())
        {
            llm1ModelName_=std::make_shared<std::string>(r["llm1_model_name"].as<std::string>());
        }
        if(!r["llm1_input_prompt"].isNull())
        {
            llm1InputPrompt_=std::make_shared<std::string>(r["llm1_input_prompt"].as<std::string>());
        }
        if(!r["llm1_rephrased_question"].isNull())
        {
            llm1RephrasedQuestion_=std::make_shared<std::string>(r["llm1_rephrased_question"].as<std::string>());
        }
        if(!r["llm1_keywords_extracted"].isNull())
        {
            llm1KeywordsExtracted_=std::make_shared<std::string>(r["llm1_keywords_extracted"].as<std::string>());
        }
        if(!r["llm1_semantic_search_string"].isNull())
        {
            llm1SemanticSearchString_=std::make_shared<std::string>(r["llm1_semantic_search_string"].as<std::string>());
        }
        if(!r["llm1_input_tokens"].isNull())
        {
            llm1InputTokens_=std::make_shared<int32_t>(r["llm1_input_tokens"].as<int32_t>());
        }
        if(!r["llm1_output_tokens"].isNull())
        {
            llm1OutputTokens_=std::make_shared<int32_t>(r["llm1_output_tokens"].as<int32_t>());
        }
        if(!r["llm1_processing_time_ms"].isNull())
        {
            llm1ProcessingTimeMs_=std::make_shared<int32_t>(r["llm1_processing_time_ms"].as<int32_t>());
        }
        if(!r["internal_search_query_keywords"].isNull())
        {
            internalSearchQueryKeywords_=std::make_shared<std::string>(r["internal_search_query_keywords"].as<std::string>());
        }
        if(!r["internal_search_query_semantic"].isNull())
        {
            internalSearchQuerySemantic_=std::make_shared<std::string>(r["internal_search_query_semantic"].as<std::string>());
        }
        if(!r["internal_search_retrieved_docs"].isNull())
        {
            internalSearchRetrievedDocs_=std::make_shared<std::string>(r["internal_search_retrieved_docs"].as<std::string>());
        }
        if(!r["internal_search_processing_time_ms"].isNull())
        {
            internalSearchProcessingTimeMs_=std::make_shared<int32_t>(r["internal_search_processing_time_ms"].as<int32_t>());
        }
        if(!r["llm2_model_name"].isNull())
        {
            llm2ModelName_=std::make_shared<std::string>(r["llm2_model_name"].as<std::string>());
        }
        if(!r["llm2_constructed_prompt"].isNull())
        {
            llm2ConstructedPrompt_=std::make_shared<std::string>(r["llm2_constructed_prompt"].as<std::string>());
        }
        if(!r["llm2_final_response"].isNull())
        {
            llm2FinalResponse_=std::make_shared<std::string>(r["llm2_final_response"].as<std::string>());
        }
        if(!r["llm2_input_tokens"].isNull())
        {
            llm2InputTokens_=std::make_shared<int32_t>(r["llm2_input_tokens"].as<int32_t>());
        }
        if(!r["llm2_output_tokens"].isNull())
        {
            llm2OutputTokens_=std::make_shared<int32_t>(r["llm2_output_tokens"].as<int32_t>());
        }
        if(!r["llm2_processing_time_ms"].isNull())
        {
            llm2ProcessingTimeMs_=std::make_shared<int32_t>(r["llm2_processing_time_ms"].as<int32_t>());
        }
        if(!r["final_response_to_user"].isNull())
        {
            finalResponseToUser_=std::make_shared<std::string>(r["final_response_to_user"].as<std::string>());
        }
        if(!r["overall_status"].isNull())
        {
            overallStatus_=std::make_shared<std::string>(r["overall_status"].as<std::string>());
        }
        if(!r["error_message"].isNull())
        {
            errorMessage_=std::make_shared<std::string>(r["error_message"].as<std::string>());
        }
        if(!r["error_step"].isNull())
        {
            errorStep_=std::make_shared<std::string>(r["error_step"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 33 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            interactionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            sessionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampUserRequest_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampFinalResponse_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            userOriginalPrompt_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            llm1ModelName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            llm1InputPrompt_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            llm1RephrasedQuestion_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            llm1KeywordsExtracted_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            llm1SemanticSearchString_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            llm1InputTokens_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            llm1OutputTokens_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            llm1ProcessingTimeMs_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            internalSearchQueryKeywords_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            internalSearchQuerySemantic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            internalSearchRetrievedDocs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            internalSearchProcessingTimeMs_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            llm2ModelName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            llm2ConstructedPrompt_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            llm2FinalResponse_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            llm2InputTokens_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 27;
        if(!r[index].isNull())
        {
            llm2OutputTokens_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 28;
        if(!r[index].isNull())
        {
            llm2ProcessingTimeMs_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 29;
        if(!r[index].isNull())
        {
            finalResponseToUser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 30;
        if(!r[index].isNull())
        {
            overallStatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 31;
        if(!r[index].isNull())
        {
            errorMessage_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 32;
        if(!r[index].isNull())
        {
            errorStep_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

InteractionLogs::InteractionLogs(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 33)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            interactionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampUserRequest_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampFinalResponse_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            userOriginalPrompt_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            llm1ModelName_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            llm1InputPrompt_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            llm1RephrasedQuestion_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            llm1KeywordsExtracted_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            llm1SemanticSearchString_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            llm1InputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            llm1OutputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            llm1ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            internalSearchQueryKeywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            internalSearchQuerySemantic_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            internalSearchRetrievedDocs_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            internalSearchProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            llm2ModelName_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            llm2ConstructedPrompt_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            llm2FinalResponse_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            llm2InputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[26]].asInt64());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            llm2OutputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[27]].asInt64());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            llm2ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[28]].asInt64());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            finalResponseToUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            overallStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            errorMessage_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            errorStep_=std::make_shared<std::string>(pJson[pMasqueradingVector[32]].asString());
        }
    }
}

InteractionLogs::InteractionLogs(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("interaction_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["interaction_id"].isNull())
        {
            interactionId_=std::make_shared<std::string>(pJson["interaction_id"].asString());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("timestamp_user_request"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["timestamp_user_request"].isNull())
        {
            auto timeStr = pJson["timestamp_user_request"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampUserRequest_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm1_start"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["timestamp_llm1_start"].isNull())
        {
            auto timeStr = pJson["timestamp_llm1_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm1_end"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["timestamp_llm1_end"].isNull())
        {
            auto timeStr = pJson["timestamp_llm1_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_internal_search_start"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["timestamp_internal_search_start"].isNull())
        {
            auto timeStr = pJson["timestamp_internal_search_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_internal_search_end"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["timestamp_internal_search_end"].isNull())
        {
            auto timeStr = pJson["timestamp_internal_search_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm2_start"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["timestamp_llm2_start"].isNull())
        {
            auto timeStr = pJson["timestamp_llm2_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm2_end"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["timestamp_llm2_end"].isNull())
        {
            auto timeStr = pJson["timestamp_llm2_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_final_response"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["timestamp_final_response"].isNull())
        {
            auto timeStr = pJson["timestamp_final_response"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampFinalResponse_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("user_original_prompt"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["user_original_prompt"].isNull())
        {
            userOriginalPrompt_=std::make_shared<std::string>(pJson["user_original_prompt"].asString());
        }
    }
    if(pJson.isMember("llm1_model_name"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["llm1_model_name"].isNull())
        {
            llm1ModelName_=std::make_shared<std::string>(pJson["llm1_model_name"].asString());
        }
    }
    if(pJson.isMember("llm1_input_prompt"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["llm1_input_prompt"].isNull())
        {
            llm1InputPrompt_=std::make_shared<std::string>(pJson["llm1_input_prompt"].asString());
        }
    }
    if(pJson.isMember("llm1_rephrased_question"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["llm1_rephrased_question"].isNull())
        {
            llm1RephrasedQuestion_=std::make_shared<std::string>(pJson["llm1_rephrased_question"].asString());
        }
    }
    if(pJson.isMember("llm1_keywords_extracted"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["llm1_keywords_extracted"].isNull())
        {
            llm1KeywordsExtracted_=std::make_shared<std::string>(pJson["llm1_keywords_extracted"].asString());
        }
    }
    if(pJson.isMember("llm1_semantic_search_string"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["llm1_semantic_search_string"].isNull())
        {
            llm1SemanticSearchString_=std::make_shared<std::string>(pJson["llm1_semantic_search_string"].asString());
        }
    }
    if(pJson.isMember("llm1_input_tokens"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["llm1_input_tokens"].isNull())
        {
            llm1InputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm1_input_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm1_output_tokens"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["llm1_output_tokens"].isNull())
        {
            llm1OutputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm1_output_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm1_processing_time_ms"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["llm1_processing_time_ms"].isNull())
        {
            llm1ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson["llm1_processing_time_ms"].asInt64());
        }
    }
    if(pJson.isMember("internal_search_query_keywords"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["internal_search_query_keywords"].isNull())
        {
            internalSearchQueryKeywords_=std::make_shared<std::string>(pJson["internal_search_query_keywords"].asString());
        }
    }
    if(pJson.isMember("internal_search_query_semantic"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["internal_search_query_semantic"].isNull())
        {
            internalSearchQuerySemantic_=std::make_shared<std::string>(pJson["internal_search_query_semantic"].asString());
        }
    }
    if(pJson.isMember("internal_search_retrieved_docs"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["internal_search_retrieved_docs"].isNull())
        {
            internalSearchRetrievedDocs_=std::make_shared<std::string>(pJson["internal_search_retrieved_docs"].asString());
        }
    }
    if(pJson.isMember("internal_search_processing_time_ms"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["internal_search_processing_time_ms"].isNull())
        {
            internalSearchProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson["internal_search_processing_time_ms"].asInt64());
        }
    }
    if(pJson.isMember("llm2_model_name"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["llm2_model_name"].isNull())
        {
            llm2ModelName_=std::make_shared<std::string>(pJson["llm2_model_name"].asString());
        }
    }
    if(pJson.isMember("llm2_constructed_prompt"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["llm2_constructed_prompt"].isNull())
        {
            llm2ConstructedPrompt_=std::make_shared<std::string>(pJson["llm2_constructed_prompt"].asString());
        }
    }
    if(pJson.isMember("llm2_final_response"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["llm2_final_response"].isNull())
        {
            llm2FinalResponse_=std::make_shared<std::string>(pJson["llm2_final_response"].asString());
        }
    }
    if(pJson.isMember("llm2_input_tokens"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["llm2_input_tokens"].isNull())
        {
            llm2InputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm2_input_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm2_output_tokens"))
    {
        dirtyFlag_[27]=true;
        if(!pJson["llm2_output_tokens"].isNull())
        {
            llm2OutputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm2_output_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm2_processing_time_ms"))
    {
        dirtyFlag_[28]=true;
        if(!pJson["llm2_processing_time_ms"].isNull())
        {
            llm2ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson["llm2_processing_time_ms"].asInt64());
        }
    }
    if(pJson.isMember("final_response_to_user"))
    {
        dirtyFlag_[29]=true;
        if(!pJson["final_response_to_user"].isNull())
        {
            finalResponseToUser_=std::make_shared<std::string>(pJson["final_response_to_user"].asString());
        }
    }
    if(pJson.isMember("overall_status"))
    {
        dirtyFlag_[30]=true;
        if(!pJson["overall_status"].isNull())
        {
            overallStatus_=std::make_shared<std::string>(pJson["overall_status"].asString());
        }
    }
    if(pJson.isMember("error_message"))
    {
        dirtyFlag_[31]=true;
        if(!pJson["error_message"].isNull())
        {
            errorMessage_=std::make_shared<std::string>(pJson["error_message"].asString());
        }
    }
    if(pJson.isMember("error_step"))
    {
        dirtyFlag_[32]=true;
        if(!pJson["error_step"].isNull())
        {
            errorStep_=std::make_shared<std::string>(pJson["error_step"].asString());
        }
    }
}

void InteractionLogs::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 33)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            interactionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampUserRequest_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampFinalResponse_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            userOriginalPrompt_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            llm1ModelName_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            llm1InputPrompt_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            llm1RephrasedQuestion_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            llm1KeywordsExtracted_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            llm1SemanticSearchString_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            llm1InputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            llm1OutputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            llm1ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            internalSearchQueryKeywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            internalSearchQuerySemantic_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            internalSearchRetrievedDocs_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            internalSearchProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            llm2ModelName_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            llm2ConstructedPrompt_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            llm2FinalResponse_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            llm2InputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[26]].asInt64());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            llm2OutputTokens_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[27]].asInt64());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            llm2ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[28]].asInt64());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            finalResponseToUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            overallStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            errorMessage_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            errorStep_=std::make_shared<std::string>(pJson[pMasqueradingVector[32]].asString());
        }
    }
}

void InteractionLogs::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("interaction_id"))
    {
        if(!pJson["interaction_id"].isNull())
        {
            interactionId_=std::make_shared<std::string>(pJson["interaction_id"].asString());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("timestamp_user_request"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["timestamp_user_request"].isNull())
        {
            auto timeStr = pJson["timestamp_user_request"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampUserRequest_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm1_start"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["timestamp_llm1_start"].isNull())
        {
            auto timeStr = pJson["timestamp_llm1_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm1_end"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["timestamp_llm1_end"].isNull())
        {
            auto timeStr = pJson["timestamp_llm1_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm1End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_internal_search_start"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["timestamp_internal_search_start"].isNull())
        {
            auto timeStr = pJson["timestamp_internal_search_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_internal_search_end"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["timestamp_internal_search_end"].isNull())
        {
            auto timeStr = pJson["timestamp_internal_search_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampInternalSearchEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm2_start"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["timestamp_llm2_start"].isNull())
        {
            auto timeStr = pJson["timestamp_llm2_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2Start_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_llm2_end"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["timestamp_llm2_end"].isNull())
        {
            auto timeStr = pJson["timestamp_llm2_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampLlm2End_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("timestamp_final_response"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["timestamp_final_response"].isNull())
        {
            auto timeStr = pJson["timestamp_final_response"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestampFinalResponse_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("user_original_prompt"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["user_original_prompt"].isNull())
        {
            userOriginalPrompt_=std::make_shared<std::string>(pJson["user_original_prompt"].asString());
        }
    }
    if(pJson.isMember("llm1_model_name"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["llm1_model_name"].isNull())
        {
            llm1ModelName_=std::make_shared<std::string>(pJson["llm1_model_name"].asString());
        }
    }
    if(pJson.isMember("llm1_input_prompt"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["llm1_input_prompt"].isNull())
        {
            llm1InputPrompt_=std::make_shared<std::string>(pJson["llm1_input_prompt"].asString());
        }
    }
    if(pJson.isMember("llm1_rephrased_question"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["llm1_rephrased_question"].isNull())
        {
            llm1RephrasedQuestion_=std::make_shared<std::string>(pJson["llm1_rephrased_question"].asString());
        }
    }
    if(pJson.isMember("llm1_keywords_extracted"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["llm1_keywords_extracted"].isNull())
        {
            llm1KeywordsExtracted_=std::make_shared<std::string>(pJson["llm1_keywords_extracted"].asString());
        }
    }
    if(pJson.isMember("llm1_semantic_search_string"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["llm1_semantic_search_string"].isNull())
        {
            llm1SemanticSearchString_=std::make_shared<std::string>(pJson["llm1_semantic_search_string"].asString());
        }
    }
    if(pJson.isMember("llm1_input_tokens"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["llm1_input_tokens"].isNull())
        {
            llm1InputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm1_input_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm1_output_tokens"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["llm1_output_tokens"].isNull())
        {
            llm1OutputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm1_output_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm1_processing_time_ms"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["llm1_processing_time_ms"].isNull())
        {
            llm1ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson["llm1_processing_time_ms"].asInt64());
        }
    }
    if(pJson.isMember("internal_search_query_keywords"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["internal_search_query_keywords"].isNull())
        {
            internalSearchQueryKeywords_=std::make_shared<std::string>(pJson["internal_search_query_keywords"].asString());
        }
    }
    if(pJson.isMember("internal_search_query_semantic"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["internal_search_query_semantic"].isNull())
        {
            internalSearchQuerySemantic_=std::make_shared<std::string>(pJson["internal_search_query_semantic"].asString());
        }
    }
    if(pJson.isMember("internal_search_retrieved_docs"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["internal_search_retrieved_docs"].isNull())
        {
            internalSearchRetrievedDocs_=std::make_shared<std::string>(pJson["internal_search_retrieved_docs"].asString());
        }
    }
    if(pJson.isMember("internal_search_processing_time_ms"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["internal_search_processing_time_ms"].isNull())
        {
            internalSearchProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson["internal_search_processing_time_ms"].asInt64());
        }
    }
    if(pJson.isMember("llm2_model_name"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["llm2_model_name"].isNull())
        {
            llm2ModelName_=std::make_shared<std::string>(pJson["llm2_model_name"].asString());
        }
    }
    if(pJson.isMember("llm2_constructed_prompt"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["llm2_constructed_prompt"].isNull())
        {
            llm2ConstructedPrompt_=std::make_shared<std::string>(pJson["llm2_constructed_prompt"].asString());
        }
    }
    if(pJson.isMember("llm2_final_response"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["llm2_final_response"].isNull())
        {
            llm2FinalResponse_=std::make_shared<std::string>(pJson["llm2_final_response"].asString());
        }
    }
    if(pJson.isMember("llm2_input_tokens"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["llm2_input_tokens"].isNull())
        {
            llm2InputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm2_input_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm2_output_tokens"))
    {
        dirtyFlag_[27] = true;
        if(!pJson["llm2_output_tokens"].isNull())
        {
            llm2OutputTokens_=std::make_shared<int32_t>((int32_t)pJson["llm2_output_tokens"].asInt64());
        }
    }
    if(pJson.isMember("llm2_processing_time_ms"))
    {
        dirtyFlag_[28] = true;
        if(!pJson["llm2_processing_time_ms"].isNull())
        {
            llm2ProcessingTimeMs_=std::make_shared<int32_t>((int32_t)pJson["llm2_processing_time_ms"].asInt64());
        }
    }
    if(pJson.isMember("final_response_to_user"))
    {
        dirtyFlag_[29] = true;
        if(!pJson["final_response_to_user"].isNull())
        {
            finalResponseToUser_=std::make_shared<std::string>(pJson["final_response_to_user"].asString());
        }
    }
    if(pJson.isMember("overall_status"))
    {
        dirtyFlag_[30] = true;
        if(!pJson["overall_status"].isNull())
        {
            overallStatus_=std::make_shared<std::string>(pJson["overall_status"].asString());
        }
    }
    if(pJson.isMember("error_message"))
    {
        dirtyFlag_[31] = true;
        if(!pJson["error_message"].isNull())
        {
            errorMessage_=std::make_shared<std::string>(pJson["error_message"].asString());
        }
    }
    if(pJson.isMember("error_step"))
    {
        dirtyFlag_[32] = true;
        if(!pJson["error_step"].isNull())
        {
            errorStep_=std::make_shared<std::string>(pJson["error_step"].asString());
        }
    }
}

const std::string &InteractionLogs::getValueOfInteractionId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(interactionId_)
        return *interactionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getInteractionId() const noexcept
{
    return interactionId_;
}
void InteractionLogs::setInteractionId(const std::string &pInteractionId) noexcept
{
    interactionId_ = std::make_shared<std::string>(pInteractionId);
    dirtyFlag_[0] = true;
}
void InteractionLogs::setInteractionId(std::string &&pInteractionId) noexcept
{
    interactionId_ = std::make_shared<std::string>(std::move(pInteractionId));
    dirtyFlag_[0] = true;
}
const typename InteractionLogs::PrimaryKeyType & InteractionLogs::getPrimaryKey() const
{
    assert(interactionId_);
    return *interactionId_;
}

const std::string &InteractionLogs::getValueOfSessionId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(sessionId_)
        return *sessionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getSessionId() const noexcept
{
    return sessionId_;
}
void InteractionLogs::setSessionId(const std::string &pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(pSessionId);
    dirtyFlag_[1] = true;
}
void InteractionLogs::setSessionId(std::string &&pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(std::move(pSessionId));
    dirtyFlag_[1] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampUserRequest() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampUserRequest_)
        return *timestampUserRequest_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampUserRequest() const noexcept
{
    return timestampUserRequest_;
}
void InteractionLogs::setTimestampUserRequest(const ::trantor::Date &pTimestampUserRequest) noexcept
{
    timestampUserRequest_ = std::make_shared<::trantor::Date>(pTimestampUserRequest);
    dirtyFlag_[2] = true;
}
void InteractionLogs::setTimestampUserRequestToNull() noexcept
{
    timestampUserRequest_.reset();
    dirtyFlag_[2] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampLlm1Start() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampLlm1Start_)
        return *timestampLlm1Start_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampLlm1Start() const noexcept
{
    return timestampLlm1Start_;
}
void InteractionLogs::setTimestampLlm1Start(const ::trantor::Date &pTimestampLlm1Start) noexcept
{
    timestampLlm1Start_ = std::make_shared<::trantor::Date>(pTimestampLlm1Start);
    dirtyFlag_[3] = true;
}
void InteractionLogs::setTimestampLlm1StartToNull() noexcept
{
    timestampLlm1Start_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampLlm1End() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampLlm1End_)
        return *timestampLlm1End_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampLlm1End() const noexcept
{
    return timestampLlm1End_;
}
void InteractionLogs::setTimestampLlm1End(const ::trantor::Date &pTimestampLlm1End) noexcept
{
    timestampLlm1End_ = std::make_shared<::trantor::Date>(pTimestampLlm1End);
    dirtyFlag_[4] = true;
}
void InteractionLogs::setTimestampLlm1EndToNull() noexcept
{
    timestampLlm1End_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampInternalSearchStart() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampInternalSearchStart_)
        return *timestampInternalSearchStart_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampInternalSearchStart() const noexcept
{
    return timestampInternalSearchStart_;
}
void InteractionLogs::setTimestampInternalSearchStart(const ::trantor::Date &pTimestampInternalSearchStart) noexcept
{
    timestampInternalSearchStart_ = std::make_shared<::trantor::Date>(pTimestampInternalSearchStart);
    dirtyFlag_[5] = true;
}
void InteractionLogs::setTimestampInternalSearchStartToNull() noexcept
{
    timestampInternalSearchStart_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampInternalSearchEnd() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampInternalSearchEnd_)
        return *timestampInternalSearchEnd_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampInternalSearchEnd() const noexcept
{
    return timestampInternalSearchEnd_;
}
void InteractionLogs::setTimestampInternalSearchEnd(const ::trantor::Date &pTimestampInternalSearchEnd) noexcept
{
    timestampInternalSearchEnd_ = std::make_shared<::trantor::Date>(pTimestampInternalSearchEnd);
    dirtyFlag_[6] = true;
}
void InteractionLogs::setTimestampInternalSearchEndToNull() noexcept
{
    timestampInternalSearchEnd_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampLlm2Start() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampLlm2Start_)
        return *timestampLlm2Start_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampLlm2Start() const noexcept
{
    return timestampLlm2Start_;
}
void InteractionLogs::setTimestampLlm2Start(const ::trantor::Date &pTimestampLlm2Start) noexcept
{
    timestampLlm2Start_ = std::make_shared<::trantor::Date>(pTimestampLlm2Start);
    dirtyFlag_[7] = true;
}
void InteractionLogs::setTimestampLlm2StartToNull() noexcept
{
    timestampLlm2Start_.reset();
    dirtyFlag_[7] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampLlm2End() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampLlm2End_)
        return *timestampLlm2End_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampLlm2End() const noexcept
{
    return timestampLlm2End_;
}
void InteractionLogs::setTimestampLlm2End(const ::trantor::Date &pTimestampLlm2End) noexcept
{
    timestampLlm2End_ = std::make_shared<::trantor::Date>(pTimestampLlm2End);
    dirtyFlag_[8] = true;
}
void InteractionLogs::setTimestampLlm2EndToNull() noexcept
{
    timestampLlm2End_.reset();
    dirtyFlag_[8] = true;
}

const ::trantor::Date &InteractionLogs::getValueOfTimestampFinalResponse() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestampFinalResponse_)
        return *timestampFinalResponse_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InteractionLogs::getTimestampFinalResponse() const noexcept
{
    return timestampFinalResponse_;
}
void InteractionLogs::setTimestampFinalResponse(const ::trantor::Date &pTimestampFinalResponse) noexcept
{
    timestampFinalResponse_ = std::make_shared<::trantor::Date>(pTimestampFinalResponse);
    dirtyFlag_[9] = true;
}
void InteractionLogs::setTimestampFinalResponseToNull() noexcept
{
    timestampFinalResponse_.reset();
    dirtyFlag_[9] = true;
}

const std::string &InteractionLogs::getValueOfUserOriginalPrompt() const noexcept
{
    static const std::string defaultValue = std::string();
    if(userOriginalPrompt_)
        return *userOriginalPrompt_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getUserOriginalPrompt() const noexcept
{
    return userOriginalPrompt_;
}
void InteractionLogs::setUserOriginalPrompt(const std::string &pUserOriginalPrompt) noexcept
{
    userOriginalPrompt_ = std::make_shared<std::string>(pUserOriginalPrompt);
    dirtyFlag_[10] = true;
}
void InteractionLogs::setUserOriginalPrompt(std::string &&pUserOriginalPrompt) noexcept
{
    userOriginalPrompt_ = std::make_shared<std::string>(std::move(pUserOriginalPrompt));
    dirtyFlag_[10] = true;
}

const std::string &InteractionLogs::getValueOfLlm1ModelName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm1ModelName_)
        return *llm1ModelName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm1ModelName() const noexcept
{
    return llm1ModelName_;
}
void InteractionLogs::setLlm1ModelName(const std::string &pLlm1ModelName) noexcept
{
    llm1ModelName_ = std::make_shared<std::string>(pLlm1ModelName);
    dirtyFlag_[11] = true;
}
void InteractionLogs::setLlm1ModelName(std::string &&pLlm1ModelName) noexcept
{
    llm1ModelName_ = std::make_shared<std::string>(std::move(pLlm1ModelName));
    dirtyFlag_[11] = true;
}
void InteractionLogs::setLlm1ModelNameToNull() noexcept
{
    llm1ModelName_.reset();
    dirtyFlag_[11] = true;
}

const std::string &InteractionLogs::getValueOfLlm1InputPrompt() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm1InputPrompt_)
        return *llm1InputPrompt_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm1InputPrompt() const noexcept
{
    return llm1InputPrompt_;
}
void InteractionLogs::setLlm1InputPrompt(const std::string &pLlm1InputPrompt) noexcept
{
    llm1InputPrompt_ = std::make_shared<std::string>(pLlm1InputPrompt);
    dirtyFlag_[12] = true;
}
void InteractionLogs::setLlm1InputPrompt(std::string &&pLlm1InputPrompt) noexcept
{
    llm1InputPrompt_ = std::make_shared<std::string>(std::move(pLlm1InputPrompt));
    dirtyFlag_[12] = true;
}
void InteractionLogs::setLlm1InputPromptToNull() noexcept
{
    llm1InputPrompt_.reset();
    dirtyFlag_[12] = true;
}

const std::string &InteractionLogs::getValueOfLlm1RephrasedQuestion() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm1RephrasedQuestion_)
        return *llm1RephrasedQuestion_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm1RephrasedQuestion() const noexcept
{
    return llm1RephrasedQuestion_;
}
void InteractionLogs::setLlm1RephrasedQuestion(const std::string &pLlm1RephrasedQuestion) noexcept
{
    llm1RephrasedQuestion_ = std::make_shared<std::string>(pLlm1RephrasedQuestion);
    dirtyFlag_[13] = true;
}
void InteractionLogs::setLlm1RephrasedQuestion(std::string &&pLlm1RephrasedQuestion) noexcept
{
    llm1RephrasedQuestion_ = std::make_shared<std::string>(std::move(pLlm1RephrasedQuestion));
    dirtyFlag_[13] = true;
}
void InteractionLogs::setLlm1RephrasedQuestionToNull() noexcept
{
    llm1RephrasedQuestion_.reset();
    dirtyFlag_[13] = true;
}

const std::string &InteractionLogs::getValueOfLlm1KeywordsExtracted() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm1KeywordsExtracted_)
        return *llm1KeywordsExtracted_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm1KeywordsExtracted() const noexcept
{
    return llm1KeywordsExtracted_;
}
void InteractionLogs::setLlm1KeywordsExtracted(const std::string &pLlm1KeywordsExtracted) noexcept
{
    llm1KeywordsExtracted_ = std::make_shared<std::string>(pLlm1KeywordsExtracted);
    dirtyFlag_[14] = true;
}
void InteractionLogs::setLlm1KeywordsExtracted(std::string &&pLlm1KeywordsExtracted) noexcept
{
    llm1KeywordsExtracted_ = std::make_shared<std::string>(std::move(pLlm1KeywordsExtracted));
    dirtyFlag_[14] = true;
}
void InteractionLogs::setLlm1KeywordsExtractedToNull() noexcept
{
    llm1KeywordsExtracted_.reset();
    dirtyFlag_[14] = true;
}

const std::string &InteractionLogs::getValueOfLlm1SemanticSearchString() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm1SemanticSearchString_)
        return *llm1SemanticSearchString_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm1SemanticSearchString() const noexcept
{
    return llm1SemanticSearchString_;
}
void InteractionLogs::setLlm1SemanticSearchString(const std::string &pLlm1SemanticSearchString) noexcept
{
    llm1SemanticSearchString_ = std::make_shared<std::string>(pLlm1SemanticSearchString);
    dirtyFlag_[15] = true;
}
void InteractionLogs::setLlm1SemanticSearchString(std::string &&pLlm1SemanticSearchString) noexcept
{
    llm1SemanticSearchString_ = std::make_shared<std::string>(std::move(pLlm1SemanticSearchString));
    dirtyFlag_[15] = true;
}
void InteractionLogs::setLlm1SemanticSearchStringToNull() noexcept
{
    llm1SemanticSearchString_.reset();
    dirtyFlag_[15] = true;
}

const int32_t &InteractionLogs::getValueOfLlm1InputTokens() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(llm1InputTokens_)
        return *llm1InputTokens_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getLlm1InputTokens() const noexcept
{
    return llm1InputTokens_;
}
void InteractionLogs::setLlm1InputTokens(const int32_t &pLlm1InputTokens) noexcept
{
    llm1InputTokens_ = std::make_shared<int32_t>(pLlm1InputTokens);
    dirtyFlag_[16] = true;
}
void InteractionLogs::setLlm1InputTokensToNull() noexcept
{
    llm1InputTokens_.reset();
    dirtyFlag_[16] = true;
}

const int32_t &InteractionLogs::getValueOfLlm1OutputTokens() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(llm1OutputTokens_)
        return *llm1OutputTokens_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getLlm1OutputTokens() const noexcept
{
    return llm1OutputTokens_;
}
void InteractionLogs::setLlm1OutputTokens(const int32_t &pLlm1OutputTokens) noexcept
{
    llm1OutputTokens_ = std::make_shared<int32_t>(pLlm1OutputTokens);
    dirtyFlag_[17] = true;
}
void InteractionLogs::setLlm1OutputTokensToNull() noexcept
{
    llm1OutputTokens_.reset();
    dirtyFlag_[17] = true;
}

const int32_t &InteractionLogs::getValueOfLlm1ProcessingTimeMs() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(llm1ProcessingTimeMs_)
        return *llm1ProcessingTimeMs_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getLlm1ProcessingTimeMs() const noexcept
{
    return llm1ProcessingTimeMs_;
}
void InteractionLogs::setLlm1ProcessingTimeMs(const int32_t &pLlm1ProcessingTimeMs) noexcept
{
    llm1ProcessingTimeMs_ = std::make_shared<int32_t>(pLlm1ProcessingTimeMs);
    dirtyFlag_[18] = true;
}
void InteractionLogs::setLlm1ProcessingTimeMsToNull() noexcept
{
    llm1ProcessingTimeMs_.reset();
    dirtyFlag_[18] = true;
}

const std::string &InteractionLogs::getValueOfInternalSearchQueryKeywords() const noexcept
{
    static const std::string defaultValue = std::string();
    if(internalSearchQueryKeywords_)
        return *internalSearchQueryKeywords_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getInternalSearchQueryKeywords() const noexcept
{
    return internalSearchQueryKeywords_;
}
void InteractionLogs::setInternalSearchQueryKeywords(const std::string &pInternalSearchQueryKeywords) noexcept
{
    internalSearchQueryKeywords_ = std::make_shared<std::string>(pInternalSearchQueryKeywords);
    dirtyFlag_[19] = true;
}
void InteractionLogs::setInternalSearchQueryKeywords(std::string &&pInternalSearchQueryKeywords) noexcept
{
    internalSearchQueryKeywords_ = std::make_shared<std::string>(std::move(pInternalSearchQueryKeywords));
    dirtyFlag_[19] = true;
}
void InteractionLogs::setInternalSearchQueryKeywordsToNull() noexcept
{
    internalSearchQueryKeywords_.reset();
    dirtyFlag_[19] = true;
}

const std::string &InteractionLogs::getValueOfInternalSearchQuerySemantic() const noexcept
{
    static const std::string defaultValue = std::string();
    if(internalSearchQuerySemantic_)
        return *internalSearchQuerySemantic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getInternalSearchQuerySemantic() const noexcept
{
    return internalSearchQuerySemantic_;
}
void InteractionLogs::setInternalSearchQuerySemantic(const std::string &pInternalSearchQuerySemantic) noexcept
{
    internalSearchQuerySemantic_ = std::make_shared<std::string>(pInternalSearchQuerySemantic);
    dirtyFlag_[20] = true;
}
void InteractionLogs::setInternalSearchQuerySemantic(std::string &&pInternalSearchQuerySemantic) noexcept
{
    internalSearchQuerySemantic_ = std::make_shared<std::string>(std::move(pInternalSearchQuerySemantic));
    dirtyFlag_[20] = true;
}
void InteractionLogs::setInternalSearchQuerySemanticToNull() noexcept
{
    internalSearchQuerySemantic_.reset();
    dirtyFlag_[20] = true;
}

const std::string &InteractionLogs::getValueOfInternalSearchRetrievedDocs() const noexcept
{
    static const std::string defaultValue = std::string();
    if(internalSearchRetrievedDocs_)
        return *internalSearchRetrievedDocs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getInternalSearchRetrievedDocs() const noexcept
{
    return internalSearchRetrievedDocs_;
}
void InteractionLogs::setInternalSearchRetrievedDocs(const std::string &pInternalSearchRetrievedDocs) noexcept
{
    internalSearchRetrievedDocs_ = std::make_shared<std::string>(pInternalSearchRetrievedDocs);
    dirtyFlag_[21] = true;
}
void InteractionLogs::setInternalSearchRetrievedDocs(std::string &&pInternalSearchRetrievedDocs) noexcept
{
    internalSearchRetrievedDocs_ = std::make_shared<std::string>(std::move(pInternalSearchRetrievedDocs));
    dirtyFlag_[21] = true;
}
void InteractionLogs::setInternalSearchRetrievedDocsToNull() noexcept
{
    internalSearchRetrievedDocs_.reset();
    dirtyFlag_[21] = true;
}

const int32_t &InteractionLogs::getValueOfInternalSearchProcessingTimeMs() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(internalSearchProcessingTimeMs_)
        return *internalSearchProcessingTimeMs_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getInternalSearchProcessingTimeMs() const noexcept
{
    return internalSearchProcessingTimeMs_;
}
void InteractionLogs::setInternalSearchProcessingTimeMs(const int32_t &pInternalSearchProcessingTimeMs) noexcept
{
    internalSearchProcessingTimeMs_ = std::make_shared<int32_t>(pInternalSearchProcessingTimeMs);
    dirtyFlag_[22] = true;
}
void InteractionLogs::setInternalSearchProcessingTimeMsToNull() noexcept
{
    internalSearchProcessingTimeMs_.reset();
    dirtyFlag_[22] = true;
}

const std::string &InteractionLogs::getValueOfLlm2ModelName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm2ModelName_)
        return *llm2ModelName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm2ModelName() const noexcept
{
    return llm2ModelName_;
}
void InteractionLogs::setLlm2ModelName(const std::string &pLlm2ModelName) noexcept
{
    llm2ModelName_ = std::make_shared<std::string>(pLlm2ModelName);
    dirtyFlag_[23] = true;
}
void InteractionLogs::setLlm2ModelName(std::string &&pLlm2ModelName) noexcept
{
    llm2ModelName_ = std::make_shared<std::string>(std::move(pLlm2ModelName));
    dirtyFlag_[23] = true;
}
void InteractionLogs::setLlm2ModelNameToNull() noexcept
{
    llm2ModelName_.reset();
    dirtyFlag_[23] = true;
}

const std::string &InteractionLogs::getValueOfLlm2ConstructedPrompt() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm2ConstructedPrompt_)
        return *llm2ConstructedPrompt_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm2ConstructedPrompt() const noexcept
{
    return llm2ConstructedPrompt_;
}
void InteractionLogs::setLlm2ConstructedPrompt(const std::string &pLlm2ConstructedPrompt) noexcept
{
    llm2ConstructedPrompt_ = std::make_shared<std::string>(pLlm2ConstructedPrompt);
    dirtyFlag_[24] = true;
}
void InteractionLogs::setLlm2ConstructedPrompt(std::string &&pLlm2ConstructedPrompt) noexcept
{
    llm2ConstructedPrompt_ = std::make_shared<std::string>(std::move(pLlm2ConstructedPrompt));
    dirtyFlag_[24] = true;
}
void InteractionLogs::setLlm2ConstructedPromptToNull() noexcept
{
    llm2ConstructedPrompt_.reset();
    dirtyFlag_[24] = true;
}

const std::string &InteractionLogs::getValueOfLlm2FinalResponse() const noexcept
{
    static const std::string defaultValue = std::string();
    if(llm2FinalResponse_)
        return *llm2FinalResponse_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getLlm2FinalResponse() const noexcept
{
    return llm2FinalResponse_;
}
void InteractionLogs::setLlm2FinalResponse(const std::string &pLlm2FinalResponse) noexcept
{
    llm2FinalResponse_ = std::make_shared<std::string>(pLlm2FinalResponse);
    dirtyFlag_[25] = true;
}
void InteractionLogs::setLlm2FinalResponse(std::string &&pLlm2FinalResponse) noexcept
{
    llm2FinalResponse_ = std::make_shared<std::string>(std::move(pLlm2FinalResponse));
    dirtyFlag_[25] = true;
}
void InteractionLogs::setLlm2FinalResponseToNull() noexcept
{
    llm2FinalResponse_.reset();
    dirtyFlag_[25] = true;
}

const int32_t &InteractionLogs::getValueOfLlm2InputTokens() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(llm2InputTokens_)
        return *llm2InputTokens_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getLlm2InputTokens() const noexcept
{
    return llm2InputTokens_;
}
void InteractionLogs::setLlm2InputTokens(const int32_t &pLlm2InputTokens) noexcept
{
    llm2InputTokens_ = std::make_shared<int32_t>(pLlm2InputTokens);
    dirtyFlag_[26] = true;
}
void InteractionLogs::setLlm2InputTokensToNull() noexcept
{
    llm2InputTokens_.reset();
    dirtyFlag_[26] = true;
}

const int32_t &InteractionLogs::getValueOfLlm2OutputTokens() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(llm2OutputTokens_)
        return *llm2OutputTokens_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getLlm2OutputTokens() const noexcept
{
    return llm2OutputTokens_;
}
void InteractionLogs::setLlm2OutputTokens(const int32_t &pLlm2OutputTokens) noexcept
{
    llm2OutputTokens_ = std::make_shared<int32_t>(pLlm2OutputTokens);
    dirtyFlag_[27] = true;
}
void InteractionLogs::setLlm2OutputTokensToNull() noexcept
{
    llm2OutputTokens_.reset();
    dirtyFlag_[27] = true;
}

const int32_t &InteractionLogs::getValueOfLlm2ProcessingTimeMs() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(llm2ProcessingTimeMs_)
        return *llm2ProcessingTimeMs_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &InteractionLogs::getLlm2ProcessingTimeMs() const noexcept
{
    return llm2ProcessingTimeMs_;
}
void InteractionLogs::setLlm2ProcessingTimeMs(const int32_t &pLlm2ProcessingTimeMs) noexcept
{
    llm2ProcessingTimeMs_ = std::make_shared<int32_t>(pLlm2ProcessingTimeMs);
    dirtyFlag_[28] = true;
}
void InteractionLogs::setLlm2ProcessingTimeMsToNull() noexcept
{
    llm2ProcessingTimeMs_.reset();
    dirtyFlag_[28] = true;
}

const std::string &InteractionLogs::getValueOfFinalResponseToUser() const noexcept
{
    static const std::string defaultValue = std::string();
    if(finalResponseToUser_)
        return *finalResponseToUser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getFinalResponseToUser() const noexcept
{
    return finalResponseToUser_;
}
void InteractionLogs::setFinalResponseToUser(const std::string &pFinalResponseToUser) noexcept
{
    finalResponseToUser_ = std::make_shared<std::string>(pFinalResponseToUser);
    dirtyFlag_[29] = true;
}
void InteractionLogs::setFinalResponseToUser(std::string &&pFinalResponseToUser) noexcept
{
    finalResponseToUser_ = std::make_shared<std::string>(std::move(pFinalResponseToUser));
    dirtyFlag_[29] = true;
}
void InteractionLogs::setFinalResponseToUserToNull() noexcept
{
    finalResponseToUser_.reset();
    dirtyFlag_[29] = true;
}

const std::string &InteractionLogs::getValueOfOverallStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(overallStatus_)
        return *overallStatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getOverallStatus() const noexcept
{
    return overallStatus_;
}
void InteractionLogs::setOverallStatus(const std::string &pOverallStatus) noexcept
{
    overallStatus_ = std::make_shared<std::string>(pOverallStatus);
    dirtyFlag_[30] = true;
}
void InteractionLogs::setOverallStatus(std::string &&pOverallStatus) noexcept
{
    overallStatus_ = std::make_shared<std::string>(std::move(pOverallStatus));
    dirtyFlag_[30] = true;
}
void InteractionLogs::setOverallStatusToNull() noexcept
{
    overallStatus_.reset();
    dirtyFlag_[30] = true;
}

const std::string &InteractionLogs::getValueOfErrorMessage() const noexcept
{
    static const std::string defaultValue = std::string();
    if(errorMessage_)
        return *errorMessage_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getErrorMessage() const noexcept
{
    return errorMessage_;
}
void InteractionLogs::setErrorMessage(const std::string &pErrorMessage) noexcept
{
    errorMessage_ = std::make_shared<std::string>(pErrorMessage);
    dirtyFlag_[31] = true;
}
void InteractionLogs::setErrorMessage(std::string &&pErrorMessage) noexcept
{
    errorMessage_ = std::make_shared<std::string>(std::move(pErrorMessage));
    dirtyFlag_[31] = true;
}
void InteractionLogs::setErrorMessageToNull() noexcept
{
    errorMessage_.reset();
    dirtyFlag_[31] = true;
}

const std::string &InteractionLogs::getValueOfErrorStep() const noexcept
{
    static const std::string defaultValue = std::string();
    if(errorStep_)
        return *errorStep_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InteractionLogs::getErrorStep() const noexcept
{
    return errorStep_;
}
void InteractionLogs::setErrorStep(const std::string &pErrorStep) noexcept
{
    errorStep_ = std::make_shared<std::string>(pErrorStep);
    dirtyFlag_[32] = true;
}
void InteractionLogs::setErrorStep(std::string &&pErrorStep) noexcept
{
    errorStep_ = std::make_shared<std::string>(std::move(pErrorStep));
    dirtyFlag_[32] = true;
}
void InteractionLogs::setErrorStepToNull() noexcept
{
    errorStep_.reset();
    dirtyFlag_[32] = true;
}

void InteractionLogs::updateId(const uint64_t id)
{
}

const std::vector<std::string> &InteractionLogs::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "interaction_id",
        "session_id",
        "timestamp_user_request",
        "timestamp_llm1_start",
        "timestamp_llm1_end",
        "timestamp_internal_search_start",
        "timestamp_internal_search_end",
        "timestamp_llm2_start",
        "timestamp_llm2_end",
        "timestamp_final_response",
        "user_original_prompt",
        "llm1_model_name",
        "llm1_input_prompt",
        "llm1_rephrased_question",
        "llm1_keywords_extracted",
        "llm1_semantic_search_string",
        "llm1_input_tokens",
        "llm1_output_tokens",
        "llm1_processing_time_ms",
        "internal_search_query_keywords",
        "internal_search_query_semantic",
        "internal_search_retrieved_docs",
        "internal_search_processing_time_ms",
        "llm2_model_name",
        "llm2_constructed_prompt",
        "llm2_final_response",
        "llm2_input_tokens",
        "llm2_output_tokens",
        "llm2_processing_time_ms",
        "final_response_to_user",
        "overall_status",
        "error_message",
        "error_step"
    };
    return inCols;
}

void InteractionLogs::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getInteractionId())
        {
            binder << getValueOfInteractionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTimestampUserRequest())
        {
            binder << getValueOfTimestampUserRequest();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTimestampLlm1Start())
        {
            binder << getValueOfTimestampLlm1Start();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTimestampLlm1End())
        {
            binder << getValueOfTimestampLlm1End();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTimestampInternalSearchStart())
        {
            binder << getValueOfTimestampInternalSearchStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTimestampInternalSearchEnd())
        {
            binder << getValueOfTimestampInternalSearchEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTimestampLlm2Start())
        {
            binder << getValueOfTimestampLlm2Start();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTimestampLlm2End())
        {
            binder << getValueOfTimestampLlm2End();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTimestampFinalResponse())
        {
            binder << getValueOfTimestampFinalResponse();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUserOriginalPrompt())
        {
            binder << getValueOfUserOriginalPrompt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getLlm1ModelName())
        {
            binder << getValueOfLlm1ModelName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getLlm1InputPrompt())
        {
            binder << getValueOfLlm1InputPrompt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getLlm1RephrasedQuestion())
        {
            binder << getValueOfLlm1RephrasedQuestion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getLlm1KeywordsExtracted())
        {
            binder << getValueOfLlm1KeywordsExtracted();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getLlm1SemanticSearchString())
        {
            binder << getValueOfLlm1SemanticSearchString();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getLlm1InputTokens())
        {
            binder << getValueOfLlm1InputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getLlm1OutputTokens())
        {
            binder << getValueOfLlm1OutputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getLlm1ProcessingTimeMs())
        {
            binder << getValueOfLlm1ProcessingTimeMs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getInternalSearchQueryKeywords())
        {
            binder << getValueOfInternalSearchQueryKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getInternalSearchQuerySemantic())
        {
            binder << getValueOfInternalSearchQuerySemantic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getInternalSearchRetrievedDocs())
        {
            binder << getValueOfInternalSearchRetrievedDocs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getInternalSearchProcessingTimeMs())
        {
            binder << getValueOfInternalSearchProcessingTimeMs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getLlm2ModelName())
        {
            binder << getValueOfLlm2ModelName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getLlm2ConstructedPrompt())
        {
            binder << getValueOfLlm2ConstructedPrompt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getLlm2FinalResponse())
        {
            binder << getValueOfLlm2FinalResponse();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getLlm2InputTokens())
        {
            binder << getValueOfLlm2InputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getLlm2OutputTokens())
        {
            binder << getValueOfLlm2OutputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getLlm2ProcessingTimeMs())
        {
            binder << getValueOfLlm2ProcessingTimeMs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getFinalResponseToUser())
        {
            binder << getValueOfFinalResponseToUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getOverallStatus())
        {
            binder << getValueOfOverallStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getErrorMessage())
        {
            binder << getValueOfErrorMessage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getErrorStep())
        {
            binder << getValueOfErrorStep();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> InteractionLogs::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    if(dirtyFlag_[27])
    {
        ret.push_back(getColumnName(27));
    }
    if(dirtyFlag_[28])
    {
        ret.push_back(getColumnName(28));
    }
    if(dirtyFlag_[29])
    {
        ret.push_back(getColumnName(29));
    }
    if(dirtyFlag_[30])
    {
        ret.push_back(getColumnName(30));
    }
    if(dirtyFlag_[31])
    {
        ret.push_back(getColumnName(31));
    }
    if(dirtyFlag_[32])
    {
        ret.push_back(getColumnName(32));
    }
    return ret;
}

void InteractionLogs::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getInteractionId())
        {
            binder << getValueOfInteractionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTimestampUserRequest())
        {
            binder << getValueOfTimestampUserRequest();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTimestampLlm1Start())
        {
            binder << getValueOfTimestampLlm1Start();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTimestampLlm1End())
        {
            binder << getValueOfTimestampLlm1End();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTimestampInternalSearchStart())
        {
            binder << getValueOfTimestampInternalSearchStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTimestampInternalSearchEnd())
        {
            binder << getValueOfTimestampInternalSearchEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTimestampLlm2Start())
        {
            binder << getValueOfTimestampLlm2Start();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTimestampLlm2End())
        {
            binder << getValueOfTimestampLlm2End();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTimestampFinalResponse())
        {
            binder << getValueOfTimestampFinalResponse();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUserOriginalPrompt())
        {
            binder << getValueOfUserOriginalPrompt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getLlm1ModelName())
        {
            binder << getValueOfLlm1ModelName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getLlm1InputPrompt())
        {
            binder << getValueOfLlm1InputPrompt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getLlm1RephrasedQuestion())
        {
            binder << getValueOfLlm1RephrasedQuestion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getLlm1KeywordsExtracted())
        {
            binder << getValueOfLlm1KeywordsExtracted();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getLlm1SemanticSearchString())
        {
            binder << getValueOfLlm1SemanticSearchString();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getLlm1InputTokens())
        {
            binder << getValueOfLlm1InputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getLlm1OutputTokens())
        {
            binder << getValueOfLlm1OutputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getLlm1ProcessingTimeMs())
        {
            binder << getValueOfLlm1ProcessingTimeMs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getInternalSearchQueryKeywords())
        {
            binder << getValueOfInternalSearchQueryKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getInternalSearchQuerySemantic())
        {
            binder << getValueOfInternalSearchQuerySemantic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getInternalSearchRetrievedDocs())
        {
            binder << getValueOfInternalSearchRetrievedDocs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getInternalSearchProcessingTimeMs())
        {
            binder << getValueOfInternalSearchProcessingTimeMs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getLlm2ModelName())
        {
            binder << getValueOfLlm2ModelName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getLlm2ConstructedPrompt())
        {
            binder << getValueOfLlm2ConstructedPrompt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getLlm2FinalResponse())
        {
            binder << getValueOfLlm2FinalResponse();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getLlm2InputTokens())
        {
            binder << getValueOfLlm2InputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getLlm2OutputTokens())
        {
            binder << getValueOfLlm2OutputTokens();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getLlm2ProcessingTimeMs())
        {
            binder << getValueOfLlm2ProcessingTimeMs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getFinalResponseToUser())
        {
            binder << getValueOfFinalResponseToUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getOverallStatus())
        {
            binder << getValueOfOverallStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getErrorMessage())
        {
            binder << getValueOfErrorMessage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getErrorStep())
        {
            binder << getValueOfErrorStep();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value InteractionLogs::toJson() const
{
    Json::Value ret;
    if(getInteractionId())
    {
        ret["interaction_id"]=getValueOfInteractionId();
    }
    else
    {
        ret["interaction_id"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getTimestampUserRequest())
    {
        ret["timestamp_user_request"]=getTimestampUserRequest()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_user_request"]=Json::Value();
    }
    if(getTimestampLlm1Start())
    {
        ret["timestamp_llm1_start"]=getTimestampLlm1Start()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm1_start"]=Json::Value();
    }
    if(getTimestampLlm1End())
    {
        ret["timestamp_llm1_end"]=getTimestampLlm1End()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm1_end"]=Json::Value();
    }
    if(getTimestampInternalSearchStart())
    {
        ret["timestamp_internal_search_start"]=getTimestampInternalSearchStart()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_internal_search_start"]=Json::Value();
    }
    if(getTimestampInternalSearchEnd())
    {
        ret["timestamp_internal_search_end"]=getTimestampInternalSearchEnd()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_internal_search_end"]=Json::Value();
    }
    if(getTimestampLlm2Start())
    {
        ret["timestamp_llm2_start"]=getTimestampLlm2Start()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm2_start"]=Json::Value();
    }
    if(getTimestampLlm2End())
    {
        ret["timestamp_llm2_end"]=getTimestampLlm2End()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm2_end"]=Json::Value();
    }
    if(getTimestampFinalResponse())
    {
        ret["timestamp_final_response"]=getTimestampFinalResponse()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_final_response"]=Json::Value();
    }
    if(getUserOriginalPrompt())
    {
        ret["user_original_prompt"]=getValueOfUserOriginalPrompt();
    }
    else
    {
        ret["user_original_prompt"]=Json::Value();
    }
    if(getLlm1ModelName())
    {
        ret["llm1_model_name"]=getValueOfLlm1ModelName();
    }
    else
    {
        ret["llm1_model_name"]=Json::Value();
    }
    if(getLlm1InputPrompt())
    {
        ret["llm1_input_prompt"]=getValueOfLlm1InputPrompt();
    }
    else
    {
        ret["llm1_input_prompt"]=Json::Value();
    }
    if(getLlm1RephrasedQuestion())
    {
        ret["llm1_rephrased_question"]=getValueOfLlm1RephrasedQuestion();
    }
    else
    {
        ret["llm1_rephrased_question"]=Json::Value();
    }
    if(getLlm1KeywordsExtracted())
    {
        ret["llm1_keywords_extracted"]=getValueOfLlm1KeywordsExtracted();
    }
    else
    {
        ret["llm1_keywords_extracted"]=Json::Value();
    }
    if(getLlm1SemanticSearchString())
    {
        ret["llm1_semantic_search_string"]=getValueOfLlm1SemanticSearchString();
    }
    else
    {
        ret["llm1_semantic_search_string"]=Json::Value();
    }
    if(getLlm1InputTokens())
    {
        ret["llm1_input_tokens"]=getValueOfLlm1InputTokens();
    }
    else
    {
        ret["llm1_input_tokens"]=Json::Value();
    }
    if(getLlm1OutputTokens())
    {
        ret["llm1_output_tokens"]=getValueOfLlm1OutputTokens();
    }
    else
    {
        ret["llm1_output_tokens"]=Json::Value();
    }
    if(getLlm1ProcessingTimeMs())
    {
        ret["llm1_processing_time_ms"]=getValueOfLlm1ProcessingTimeMs();
    }
    else
    {
        ret["llm1_processing_time_ms"]=Json::Value();
    }
    if(getInternalSearchQueryKeywords())
    {
        ret["internal_search_query_keywords"]=getValueOfInternalSearchQueryKeywords();
    }
    else
    {
        ret["internal_search_query_keywords"]=Json::Value();
    }
    if(getInternalSearchQuerySemantic())
    {
        ret["internal_search_query_semantic"]=getValueOfInternalSearchQuerySemantic();
    }
    else
    {
        ret["internal_search_query_semantic"]=Json::Value();
    }
    if(getInternalSearchRetrievedDocs())
    {
        ret["internal_search_retrieved_docs"]=getValueOfInternalSearchRetrievedDocs();
    }
    else
    {
        ret["internal_search_retrieved_docs"]=Json::Value();
    }
    if(getInternalSearchProcessingTimeMs())
    {
        ret["internal_search_processing_time_ms"]=getValueOfInternalSearchProcessingTimeMs();
    }
    else
    {
        ret["internal_search_processing_time_ms"]=Json::Value();
    }
    if(getLlm2ModelName())
    {
        ret["llm2_model_name"]=getValueOfLlm2ModelName();
    }
    else
    {
        ret["llm2_model_name"]=Json::Value();
    }
    if(getLlm2ConstructedPrompt())
    {
        ret["llm2_constructed_prompt"]=getValueOfLlm2ConstructedPrompt();
    }
    else
    {
        ret["llm2_constructed_prompt"]=Json::Value();
    }
    if(getLlm2FinalResponse())
    {
        ret["llm2_final_response"]=getValueOfLlm2FinalResponse();
    }
    else
    {
        ret["llm2_final_response"]=Json::Value();
    }
    if(getLlm2InputTokens())
    {
        ret["llm2_input_tokens"]=getValueOfLlm2InputTokens();
    }
    else
    {
        ret["llm2_input_tokens"]=Json::Value();
    }
    if(getLlm2OutputTokens())
    {
        ret["llm2_output_tokens"]=getValueOfLlm2OutputTokens();
    }
    else
    {
        ret["llm2_output_tokens"]=Json::Value();
    }
    if(getLlm2ProcessingTimeMs())
    {
        ret["llm2_processing_time_ms"]=getValueOfLlm2ProcessingTimeMs();
    }
    else
    {
        ret["llm2_processing_time_ms"]=Json::Value();
    }
    if(getFinalResponseToUser())
    {
        ret["final_response_to_user"]=getValueOfFinalResponseToUser();
    }
    else
    {
        ret["final_response_to_user"]=Json::Value();
    }
    if(getOverallStatus())
    {
        ret["overall_status"]=getValueOfOverallStatus();
    }
    else
    {
        ret["overall_status"]=Json::Value();
    }
    if(getErrorMessage())
    {
        ret["error_message"]=getValueOfErrorMessage();
    }
    else
    {
        ret["error_message"]=Json::Value();
    }
    if(getErrorStep())
    {
        ret["error_step"]=getValueOfErrorStep();
    }
    else
    {
        ret["error_step"]=Json::Value();
    }
    return ret;
}

Json::Value InteractionLogs::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 33)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getInteractionId())
            {
                ret[pMasqueradingVector[0]]=getValueOfInteractionId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getSessionId())
            {
                ret[pMasqueradingVector[1]]=getValueOfSessionId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTimestampUserRequest())
            {
                ret[pMasqueradingVector[2]]=getTimestampUserRequest()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTimestampLlm1Start())
            {
                ret[pMasqueradingVector[3]]=getTimestampLlm1Start()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTimestampLlm1End())
            {
                ret[pMasqueradingVector[4]]=getTimestampLlm1End()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getTimestampInternalSearchStart())
            {
                ret[pMasqueradingVector[5]]=getTimestampInternalSearchStart()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTimestampInternalSearchEnd())
            {
                ret[pMasqueradingVector[6]]=getTimestampInternalSearchEnd()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTimestampLlm2Start())
            {
                ret[pMasqueradingVector[7]]=getTimestampLlm2Start()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getTimestampLlm2End())
            {
                ret[pMasqueradingVector[8]]=getTimestampLlm2End()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getTimestampFinalResponse())
            {
                ret[pMasqueradingVector[9]]=getTimestampFinalResponse()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUserOriginalPrompt())
            {
                ret[pMasqueradingVector[10]]=getValueOfUserOriginalPrompt();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getLlm1ModelName())
            {
                ret[pMasqueradingVector[11]]=getValueOfLlm1ModelName();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getLlm1InputPrompt())
            {
                ret[pMasqueradingVector[12]]=getValueOfLlm1InputPrompt();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getLlm1RephrasedQuestion())
            {
                ret[pMasqueradingVector[13]]=getValueOfLlm1RephrasedQuestion();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getLlm1KeywordsExtracted())
            {
                ret[pMasqueradingVector[14]]=getValueOfLlm1KeywordsExtracted();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getLlm1SemanticSearchString())
            {
                ret[pMasqueradingVector[15]]=getValueOfLlm1SemanticSearchString();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getLlm1InputTokens())
            {
                ret[pMasqueradingVector[16]]=getValueOfLlm1InputTokens();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getLlm1OutputTokens())
            {
                ret[pMasqueradingVector[17]]=getValueOfLlm1OutputTokens();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getLlm1ProcessingTimeMs())
            {
                ret[pMasqueradingVector[18]]=getValueOfLlm1ProcessingTimeMs();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getInternalSearchQueryKeywords())
            {
                ret[pMasqueradingVector[19]]=getValueOfInternalSearchQueryKeywords();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getInternalSearchQuerySemantic())
            {
                ret[pMasqueradingVector[20]]=getValueOfInternalSearchQuerySemantic();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getInternalSearchRetrievedDocs())
            {
                ret[pMasqueradingVector[21]]=getValueOfInternalSearchRetrievedDocs();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getInternalSearchProcessingTimeMs())
            {
                ret[pMasqueradingVector[22]]=getValueOfInternalSearchProcessingTimeMs();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getLlm2ModelName())
            {
                ret[pMasqueradingVector[23]]=getValueOfLlm2ModelName();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getLlm2ConstructedPrompt())
            {
                ret[pMasqueradingVector[24]]=getValueOfLlm2ConstructedPrompt();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getLlm2FinalResponse())
            {
                ret[pMasqueradingVector[25]]=getValueOfLlm2FinalResponse();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getLlm2InputTokens())
            {
                ret[pMasqueradingVector[26]]=getValueOfLlm2InputTokens();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[27].empty())
        {
            if(getLlm2OutputTokens())
            {
                ret[pMasqueradingVector[27]]=getValueOfLlm2OutputTokens();
            }
            else
            {
                ret[pMasqueradingVector[27]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[28].empty())
        {
            if(getLlm2ProcessingTimeMs())
            {
                ret[pMasqueradingVector[28]]=getValueOfLlm2ProcessingTimeMs();
            }
            else
            {
                ret[pMasqueradingVector[28]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[29].empty())
        {
            if(getFinalResponseToUser())
            {
                ret[pMasqueradingVector[29]]=getValueOfFinalResponseToUser();
            }
            else
            {
                ret[pMasqueradingVector[29]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[30].empty())
        {
            if(getOverallStatus())
            {
                ret[pMasqueradingVector[30]]=getValueOfOverallStatus();
            }
            else
            {
                ret[pMasqueradingVector[30]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[31].empty())
        {
            if(getErrorMessage())
            {
                ret[pMasqueradingVector[31]]=getValueOfErrorMessage();
            }
            else
            {
                ret[pMasqueradingVector[31]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[32].empty())
        {
            if(getErrorStep())
            {
                ret[pMasqueradingVector[32]]=getValueOfErrorStep();
            }
            else
            {
                ret[pMasqueradingVector[32]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getInteractionId())
    {
        ret["interaction_id"]=getValueOfInteractionId();
    }
    else
    {
        ret["interaction_id"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getTimestampUserRequest())
    {
        ret["timestamp_user_request"]=getTimestampUserRequest()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_user_request"]=Json::Value();
    }
    if(getTimestampLlm1Start())
    {
        ret["timestamp_llm1_start"]=getTimestampLlm1Start()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm1_start"]=Json::Value();
    }
    if(getTimestampLlm1End())
    {
        ret["timestamp_llm1_end"]=getTimestampLlm1End()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm1_end"]=Json::Value();
    }
    if(getTimestampInternalSearchStart())
    {
        ret["timestamp_internal_search_start"]=getTimestampInternalSearchStart()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_internal_search_start"]=Json::Value();
    }
    if(getTimestampInternalSearchEnd())
    {
        ret["timestamp_internal_search_end"]=getTimestampInternalSearchEnd()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_internal_search_end"]=Json::Value();
    }
    if(getTimestampLlm2Start())
    {
        ret["timestamp_llm2_start"]=getTimestampLlm2Start()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm2_start"]=Json::Value();
    }
    if(getTimestampLlm2End())
    {
        ret["timestamp_llm2_end"]=getTimestampLlm2End()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_llm2_end"]=Json::Value();
    }
    if(getTimestampFinalResponse())
    {
        ret["timestamp_final_response"]=getTimestampFinalResponse()->toDbStringLocal();
    }
    else
    {
        ret["timestamp_final_response"]=Json::Value();
    }
    if(getUserOriginalPrompt())
    {
        ret["user_original_prompt"]=getValueOfUserOriginalPrompt();
    }
    else
    {
        ret["user_original_prompt"]=Json::Value();
    }
    if(getLlm1ModelName())
    {
        ret["llm1_model_name"]=getValueOfLlm1ModelName();
    }
    else
    {
        ret["llm1_model_name"]=Json::Value();
    }
    if(getLlm1InputPrompt())
    {
        ret["llm1_input_prompt"]=getValueOfLlm1InputPrompt();
    }
    else
    {
        ret["llm1_input_prompt"]=Json::Value();
    }
    if(getLlm1RephrasedQuestion())
    {
        ret["llm1_rephrased_question"]=getValueOfLlm1RephrasedQuestion();
    }
    else
    {
        ret["llm1_rephrased_question"]=Json::Value();
    }
    if(getLlm1KeywordsExtracted())
    {
        ret["llm1_keywords_extracted"]=getValueOfLlm1KeywordsExtracted();
    }
    else
    {
        ret["llm1_keywords_extracted"]=Json::Value();
    }
    if(getLlm1SemanticSearchString())
    {
        ret["llm1_semantic_search_string"]=getValueOfLlm1SemanticSearchString();
    }
    else
    {
        ret["llm1_semantic_search_string"]=Json::Value();
    }
    if(getLlm1InputTokens())
    {
        ret["llm1_input_tokens"]=getValueOfLlm1InputTokens();
    }
    else
    {
        ret["llm1_input_tokens"]=Json::Value();
    }
    if(getLlm1OutputTokens())
    {
        ret["llm1_output_tokens"]=getValueOfLlm1OutputTokens();
    }
    else
    {
        ret["llm1_output_tokens"]=Json::Value();
    }
    if(getLlm1ProcessingTimeMs())
    {
        ret["llm1_processing_time_ms"]=getValueOfLlm1ProcessingTimeMs();
    }
    else
    {
        ret["llm1_processing_time_ms"]=Json::Value();
    }
    if(getInternalSearchQueryKeywords())
    {
        ret["internal_search_query_keywords"]=getValueOfInternalSearchQueryKeywords();
    }
    else
    {
        ret["internal_search_query_keywords"]=Json::Value();
    }
    if(getInternalSearchQuerySemantic())
    {
        ret["internal_search_query_semantic"]=getValueOfInternalSearchQuerySemantic();
    }
    else
    {
        ret["internal_search_query_semantic"]=Json::Value();
    }
    if(getInternalSearchRetrievedDocs())
    {
        ret["internal_search_retrieved_docs"]=getValueOfInternalSearchRetrievedDocs();
    }
    else
    {
        ret["internal_search_retrieved_docs"]=Json::Value();
    }
    if(getInternalSearchProcessingTimeMs())
    {
        ret["internal_search_processing_time_ms"]=getValueOfInternalSearchProcessingTimeMs();
    }
    else
    {
        ret["internal_search_processing_time_ms"]=Json::Value();
    }
    if(getLlm2ModelName())
    {
        ret["llm2_model_name"]=getValueOfLlm2ModelName();
    }
    else
    {
        ret["llm2_model_name"]=Json::Value();
    }
    if(getLlm2ConstructedPrompt())
    {
        ret["llm2_constructed_prompt"]=getValueOfLlm2ConstructedPrompt();
    }
    else
    {
        ret["llm2_constructed_prompt"]=Json::Value();
    }
    if(getLlm2FinalResponse())
    {
        ret["llm2_final_response"]=getValueOfLlm2FinalResponse();
    }
    else
    {
        ret["llm2_final_response"]=Json::Value();
    }
    if(getLlm2InputTokens())
    {
        ret["llm2_input_tokens"]=getValueOfLlm2InputTokens();
    }
    else
    {
        ret["llm2_input_tokens"]=Json::Value();
    }
    if(getLlm2OutputTokens())
    {
        ret["llm2_output_tokens"]=getValueOfLlm2OutputTokens();
    }
    else
    {
        ret["llm2_output_tokens"]=Json::Value();
    }
    if(getLlm2ProcessingTimeMs())
    {
        ret["llm2_processing_time_ms"]=getValueOfLlm2ProcessingTimeMs();
    }
    else
    {
        ret["llm2_processing_time_ms"]=Json::Value();
    }
    if(getFinalResponseToUser())
    {
        ret["final_response_to_user"]=getValueOfFinalResponseToUser();
    }
    else
    {
        ret["final_response_to_user"]=Json::Value();
    }
    if(getOverallStatus())
    {
        ret["overall_status"]=getValueOfOverallStatus();
    }
    else
    {
        ret["overall_status"]=Json::Value();
    }
    if(getErrorMessage())
    {
        ret["error_message"]=getValueOfErrorMessage();
    }
    else
    {
        ret["error_message"]=Json::Value();
    }
    if(getErrorStep())
    {
        ret["error_step"]=getValueOfErrorStep();
    }
    else
    {
        ret["error_step"]=Json::Value();
    }
    return ret;
}

bool InteractionLogs::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("interaction_id"))
    {
        if(!validJsonOfField(0, "interaction_id", pJson["interaction_id"], err, true))
            return false;
    }
    else
    {
        err="The interaction_id column cannot be null";
        return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(1, "session_id", pJson["session_id"], err, true))
            return false;
    }
    else
    {
        err="The session_id column cannot be null";
        return false;
    }
    if(pJson.isMember("timestamp_user_request"))
    {
        if(!validJsonOfField(2, "timestamp_user_request", pJson["timestamp_user_request"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_llm1_start"))
    {
        if(!validJsonOfField(3, "timestamp_llm1_start", pJson["timestamp_llm1_start"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_llm1_end"))
    {
        if(!validJsonOfField(4, "timestamp_llm1_end", pJson["timestamp_llm1_end"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_internal_search_start"))
    {
        if(!validJsonOfField(5, "timestamp_internal_search_start", pJson["timestamp_internal_search_start"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_internal_search_end"))
    {
        if(!validJsonOfField(6, "timestamp_internal_search_end", pJson["timestamp_internal_search_end"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_llm2_start"))
    {
        if(!validJsonOfField(7, "timestamp_llm2_start", pJson["timestamp_llm2_start"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_llm2_end"))
    {
        if(!validJsonOfField(8, "timestamp_llm2_end", pJson["timestamp_llm2_end"], err, true))
            return false;
    }
    if(pJson.isMember("timestamp_final_response"))
    {
        if(!validJsonOfField(9, "timestamp_final_response", pJson["timestamp_final_response"], err, true))
            return false;
    }
    if(pJson.isMember("user_original_prompt"))
    {
        if(!validJsonOfField(10, "user_original_prompt", pJson["user_original_prompt"], err, true))
            return false;
    }
    else
    {
        err="The user_original_prompt column cannot be null";
        return false;
    }
    if(pJson.isMember("llm1_model_name"))
    {
        if(!validJsonOfField(11, "llm1_model_name", pJson["llm1_model_name"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_input_prompt"))
    {
        if(!validJsonOfField(12, "llm1_input_prompt", pJson["llm1_input_prompt"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_rephrased_question"))
    {
        if(!validJsonOfField(13, "llm1_rephrased_question", pJson["llm1_rephrased_question"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_keywords_extracted"))
    {
        if(!validJsonOfField(14, "llm1_keywords_extracted", pJson["llm1_keywords_extracted"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_semantic_search_string"))
    {
        if(!validJsonOfField(15, "llm1_semantic_search_string", pJson["llm1_semantic_search_string"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_input_tokens"))
    {
        if(!validJsonOfField(16, "llm1_input_tokens", pJson["llm1_input_tokens"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_output_tokens"))
    {
        if(!validJsonOfField(17, "llm1_output_tokens", pJson["llm1_output_tokens"], err, true))
            return false;
    }
    if(pJson.isMember("llm1_processing_time_ms"))
    {
        if(!validJsonOfField(18, "llm1_processing_time_ms", pJson["llm1_processing_time_ms"], err, true))
            return false;
    }
    if(pJson.isMember("internal_search_query_keywords"))
    {
        if(!validJsonOfField(19, "internal_search_query_keywords", pJson["internal_search_query_keywords"], err, true))
            return false;
    }
    if(pJson.isMember("internal_search_query_semantic"))
    {
        if(!validJsonOfField(20, "internal_search_query_semantic", pJson["internal_search_query_semantic"], err, true))
            return false;
    }
    if(pJson.isMember("internal_search_retrieved_docs"))
    {
        if(!validJsonOfField(21, "internal_search_retrieved_docs", pJson["internal_search_retrieved_docs"], err, true))
            return false;
    }
    if(pJson.isMember("internal_search_processing_time_ms"))
    {
        if(!validJsonOfField(22, "internal_search_processing_time_ms", pJson["internal_search_processing_time_ms"], err, true))
            return false;
    }
    if(pJson.isMember("llm2_model_name"))
    {
        if(!validJsonOfField(23, "llm2_model_name", pJson["llm2_model_name"], err, true))
            return false;
    }
    if(pJson.isMember("llm2_constructed_prompt"))
    {
        if(!validJsonOfField(24, "llm2_constructed_prompt", pJson["llm2_constructed_prompt"], err, true))
            return false;
    }
    if(pJson.isMember("llm2_final_response"))
    {
        if(!validJsonOfField(25, "llm2_final_response", pJson["llm2_final_response"], err, true))
            return false;
    }
    if(pJson.isMember("llm2_input_tokens"))
    {
        if(!validJsonOfField(26, "llm2_input_tokens", pJson["llm2_input_tokens"], err, true))
            return false;
    }
    if(pJson.isMember("llm2_output_tokens"))
    {
        if(!validJsonOfField(27, "llm2_output_tokens", pJson["llm2_output_tokens"], err, true))
            return false;
    }
    if(pJson.isMember("llm2_processing_time_ms"))
    {
        if(!validJsonOfField(28, "llm2_processing_time_ms", pJson["llm2_processing_time_ms"], err, true))
            return false;
    }
    if(pJson.isMember("final_response_to_user"))
    {
        if(!validJsonOfField(29, "final_response_to_user", pJson["final_response_to_user"], err, true))
            return false;
    }
    if(pJson.isMember("overall_status"))
    {
        if(!validJsonOfField(30, "overall_status", pJson["overall_status"], err, true))
            return false;
    }
    if(pJson.isMember("error_message"))
    {
        if(!validJsonOfField(31, "error_message", pJson["error_message"], err, true))
            return false;
    }
    if(pJson.isMember("error_step"))
    {
        if(!validJsonOfField(32, "error_step", pJson["error_step"], err, true))
            return false;
    }
    return true;
}
bool InteractionLogs::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 33)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[23].empty())
      {
          if(pJson.isMember(pMasqueradingVector[23]))
          {
              if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[24].empty())
      {
          if(pJson.isMember(pMasqueradingVector[24]))
          {
              if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[25].empty())
      {
          if(pJson.isMember(pMasqueradingVector[25]))
          {
              if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[26].empty())
      {
          if(pJson.isMember(pMasqueradingVector[26]))
          {
              if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[27].empty())
      {
          if(pJson.isMember(pMasqueradingVector[27]))
          {
              if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[28].empty())
      {
          if(pJson.isMember(pMasqueradingVector[28]))
          {
              if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[29].empty())
      {
          if(pJson.isMember(pMasqueradingVector[29]))
          {
              if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[30].empty())
      {
          if(pJson.isMember(pMasqueradingVector[30]))
          {
              if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[31].empty())
      {
          if(pJson.isMember(pMasqueradingVector[31]))
          {
              if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[32].empty())
      {
          if(pJson.isMember(pMasqueradingVector[32]))
          {
              if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool InteractionLogs::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("interaction_id"))
    {
        if(!validJsonOfField(0, "interaction_id", pJson["interaction_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(1, "session_id", pJson["session_id"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_user_request"))
    {
        if(!validJsonOfField(2, "timestamp_user_request", pJson["timestamp_user_request"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_llm1_start"))
    {
        if(!validJsonOfField(3, "timestamp_llm1_start", pJson["timestamp_llm1_start"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_llm1_end"))
    {
        if(!validJsonOfField(4, "timestamp_llm1_end", pJson["timestamp_llm1_end"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_internal_search_start"))
    {
        if(!validJsonOfField(5, "timestamp_internal_search_start", pJson["timestamp_internal_search_start"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_internal_search_end"))
    {
        if(!validJsonOfField(6, "timestamp_internal_search_end", pJson["timestamp_internal_search_end"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_llm2_start"))
    {
        if(!validJsonOfField(7, "timestamp_llm2_start", pJson["timestamp_llm2_start"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_llm2_end"))
    {
        if(!validJsonOfField(8, "timestamp_llm2_end", pJson["timestamp_llm2_end"], err, false))
            return false;
    }
    if(pJson.isMember("timestamp_final_response"))
    {
        if(!validJsonOfField(9, "timestamp_final_response", pJson["timestamp_final_response"], err, false))
            return false;
    }
    if(pJson.isMember("user_original_prompt"))
    {
        if(!validJsonOfField(10, "user_original_prompt", pJson["user_original_prompt"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_model_name"))
    {
        if(!validJsonOfField(11, "llm1_model_name", pJson["llm1_model_name"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_input_prompt"))
    {
        if(!validJsonOfField(12, "llm1_input_prompt", pJson["llm1_input_prompt"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_rephrased_question"))
    {
        if(!validJsonOfField(13, "llm1_rephrased_question", pJson["llm1_rephrased_question"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_keywords_extracted"))
    {
        if(!validJsonOfField(14, "llm1_keywords_extracted", pJson["llm1_keywords_extracted"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_semantic_search_string"))
    {
        if(!validJsonOfField(15, "llm1_semantic_search_string", pJson["llm1_semantic_search_string"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_input_tokens"))
    {
        if(!validJsonOfField(16, "llm1_input_tokens", pJson["llm1_input_tokens"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_output_tokens"))
    {
        if(!validJsonOfField(17, "llm1_output_tokens", pJson["llm1_output_tokens"], err, false))
            return false;
    }
    if(pJson.isMember("llm1_processing_time_ms"))
    {
        if(!validJsonOfField(18, "llm1_processing_time_ms", pJson["llm1_processing_time_ms"], err, false))
            return false;
    }
    if(pJson.isMember("internal_search_query_keywords"))
    {
        if(!validJsonOfField(19, "internal_search_query_keywords", pJson["internal_search_query_keywords"], err, false))
            return false;
    }
    if(pJson.isMember("internal_search_query_semantic"))
    {
        if(!validJsonOfField(20, "internal_search_query_semantic", pJson["internal_search_query_semantic"], err, false))
            return false;
    }
    if(pJson.isMember("internal_search_retrieved_docs"))
    {
        if(!validJsonOfField(21, "internal_search_retrieved_docs", pJson["internal_search_retrieved_docs"], err, false))
            return false;
    }
    if(pJson.isMember("internal_search_processing_time_ms"))
    {
        if(!validJsonOfField(22, "internal_search_processing_time_ms", pJson["internal_search_processing_time_ms"], err, false))
            return false;
    }
    if(pJson.isMember("llm2_model_name"))
    {
        if(!validJsonOfField(23, "llm2_model_name", pJson["llm2_model_name"], err, false))
            return false;
    }
    if(pJson.isMember("llm2_constructed_prompt"))
    {
        if(!validJsonOfField(24, "llm2_constructed_prompt", pJson["llm2_constructed_prompt"], err, false))
            return false;
    }
    if(pJson.isMember("llm2_final_response"))
    {
        if(!validJsonOfField(25, "llm2_final_response", pJson["llm2_final_response"], err, false))
            return false;
    }
    if(pJson.isMember("llm2_input_tokens"))
    {
        if(!validJsonOfField(26, "llm2_input_tokens", pJson["llm2_input_tokens"], err, false))
            return false;
    }
    if(pJson.isMember("llm2_output_tokens"))
    {
        if(!validJsonOfField(27, "llm2_output_tokens", pJson["llm2_output_tokens"], err, false))
            return false;
    }
    if(pJson.isMember("llm2_processing_time_ms"))
    {
        if(!validJsonOfField(28, "llm2_processing_time_ms", pJson["llm2_processing_time_ms"], err, false))
            return false;
    }
    if(pJson.isMember("final_response_to_user"))
    {
        if(!validJsonOfField(29, "final_response_to_user", pJson["final_response_to_user"], err, false))
            return false;
    }
    if(pJson.isMember("overall_status"))
    {
        if(!validJsonOfField(30, "overall_status", pJson["overall_status"], err, false))
            return false;
    }
    if(pJson.isMember("error_message"))
    {
        if(!validJsonOfField(31, "error_message", pJson["error_message"], err, false))
            return false;
    }
    if(pJson.isMember("error_step"))
    {
        if(!validJsonOfField(32, "error_step", pJson["error_step"], err, false))
            return false;
    }
    return true;
}
bool InteractionLogs::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 33)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
      if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
      {
          if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
              return false;
      }
      if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
      {
          if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
              return false;
      }
      if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
      {
          if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
              return false;
      }
      if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
      {
          if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
              return false;
      }
      if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
      {
          if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, false))
              return false;
      }
      if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
      {
          if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, false))
              return false;
      }
      if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
      {
          if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, false))
              return false;
      }
      if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
      {
          if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, false))
              return false;
      }
      if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
      {
          if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, false))
              return false;
      }
      if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
      {
          if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool InteractionLogs::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson,
                                       std::string &err,
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 26:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 27:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 28:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 29:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 30:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 31:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 32:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
